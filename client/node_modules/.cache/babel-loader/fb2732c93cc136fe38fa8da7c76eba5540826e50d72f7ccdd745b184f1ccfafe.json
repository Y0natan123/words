{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Magshimim\\\\Documents\\\\wordGame\\\\client\\\\src\\\\components\\\\AdminImport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminImport = () => {\n  _s();\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const fileInputRef = useRef(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleTextChange = e => {\n    setTextContent(e.target.value);\n  };\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n  const parseWords = text => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Try different parsing strategies\n      let english, hebrew;\n\n      // Strategy 1: Look for tab separator\n      if (trimmedLine.includes('\\t')) {\n        const parts = trimmedLine.split('\\t');\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join('\\t').trim();\n        }\n      }\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\n      else if (trimmedLine.includes('  ')) {\n        const parts = trimmedLine.split(/\\s{2,}/);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(' ').trim();\n        }\n      }\n      // Strategy 3: Look for common separators like |, -, or :\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\n        const separator = trimmedLine.includes('|') ? '|' : trimmedLine.includes('-') ? '-' : ':';\n        const parts = trimmedLine.split(separator);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(separator).trim();\n        }\n      }\n      // Strategy 4: Fallback to original logic but with better hebrew detection\n      else {\n        const parts = trimmedLine.split(/\\s+/);\n        if (parts.length >= 2) {\n          // Try to find where English ends and Hebrew begins\n          // Hebrew text typically contains Hebrew characters\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n          let englishEndIndex = 0;\n          for (let i = 0; i < parts.length; i++) {\n            if (hebrewCharRegex.test(parts[i])) {\n              englishEndIndex = i;\n              break;\n            }\n          }\n\n          // If no Hebrew characters found, assume last word is Hebrew\n          if (englishEndIndex === 0) {\n            englishEndIndex = parts.length - 1;\n          }\n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\n        }\n      }\n      if (english && hebrew) {\n        words.push({\n          english,\n          hebrew,\n          lineNumber: index + 1\n        });\n      }\n    });\n    return words;\n  };\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8),\n          // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2),\n          // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round(processed / totalWords * 100)\n        });\n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', {\n        textContent\n      });\n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error importing words:', error);\n      setImportResult({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to import words'\n      });\n      setIsImporting(false);\n    }\n  };\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleDeleteAll = async () => {\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\n      if (finalConfirm) {\n        try {\n          const response = await axios.post('/api/words/clear-all', {\n            confirm: true\n          });\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\n          // Refresh the page\n          window.location.reload();\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          console.error('Error deleting all words:', error);\n          alert('Failed to delete all words: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message));\n        }\n      }\n    }\n  };\n  const handleGenerateSentences = async () => {\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      setIsGenerating(true);\n      try {\n        const response = await axios.post('/api/words/generate-sentences');\n        alert(`Successfully generated sentences for ${response.data.details.updated} words.\\n\\nProcessed: ${response.data.details.processed}\\nUpdated: ${response.data.details.updated}\\nErrors: ${response.data.details.errors}`);\n        // Refresh the page to show new sentences\n        window.location.reload();\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.error('Error generating sentences:', error);\n        alert('Failed to generate sentences: ' + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message));\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n  };\n  const parsedWords = parseWords(textContent);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-import\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-import-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Bulk Import Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Import multiple words from a text file or paste text directly. Supports multiple formats:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"format-help\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tab-separated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), \" \\\"english\\\\t\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Double space:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), \" \\\"english  \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Separators:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), \" \\\"english|\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english-\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english:\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Auto-detect:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), \" \\\"english phrase \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\" (automatically detects Hebrew characters)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Auto-difficulty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), \" Difficulty levels are automatically assessed based on word complexity\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload Text File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt,.csv\",\n          onChange: handleFileUpload,\n          ref: fileInputRef,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-help\",\n          children: \"Supported formats: .txt, .csv (UTF-8 encoding)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Or Paste Text Directly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: textContent,\n          onChange: handleTextChange,\n          placeholder: \"Enter words in any format:\\nhello \\u05E9\\u05DC\\u05D5\\u05DD\\naccording to  \\u05E2\\u05DC \\u05E4\\u05D9\\ngood morning|\\u05D1\\u05D5\\u05E7\\u05E8 \\u05D8\\u05D5\\u05D1\\nthank you-\\u05EA\\u05D5\\u05D3\\u05D4\\nhow are you:\\u05D0\\u05D9\\u05DA \\u05D0\\u05EA\\u05D4\",\n          rows: 10,\n          className: \"text-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: previewWords,\n          disabled: !textContent.trim(),\n          children: [\"Preview Words (\", parsedWords.length, \" found)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), showPreview && parsedWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Preview (\", parsedWords.length, \" words)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"English\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Hebrew\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: parsedWords.slice(0, 20).map((word, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.lineNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.english\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  dir: \"rtl\",\n                  children: word.hebrew\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), parsedWords.length > 20 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"preview-note\",\n            children: [\"Showing first 20 words. Total: \", parsedWords.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: startImport,\n          disabled: isImporting || !textContent.trim(),\n          children: isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: resetForm,\n          disabled: isImporting,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          onClick: handleDeleteAll,\n          disabled: isImporting,\n          title: \"Delete all words from database (Admin only)\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Delete All Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success\",\n          onClick: handleGenerateSentences,\n          disabled: isGenerating || isImporting,\n          title: \"Generate example sentences for existing words\",\n          children: isGenerating ? 'Generating...' : '📝 Generate Sentences'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), isImporting && progress && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress.percentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Processed: \", progress.processed, \" / \", progress.total, \" (\", progress.percentage, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Added: \", progress.added, \" | Skipped: \", progress.skipped, \" | Errors: \", progress.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Estimated time remaining: \", Math.ceil((progress.total - progress.processed) / 10), \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), importResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `import-result ${importResult.error ? 'error' : 'success'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this), importResult.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: importResult.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total processed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 18\n          }, this), \" \", importResult.total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Successfully added:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 18\n          }, this), \" \", importResult.added]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Skipped (already exist):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 18\n          }, this), \" \", importResult.skipped]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Errors:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 18\n          }, this), \" \", importResult.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Format: \\\"english hebrew\\\" (one word per line)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"English words will be converted to lowercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Duplicate words will be skipped automatically\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"All imported words start at difficulty level 1 and user level 0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Maximum file size: 10MB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminImport, \"2qhfHaTgfl6buwcCw5vaJ72TfDc=\");\n_c = AdminImport;\nexport default AdminImport;\nvar _c;\n$RefreshReg$(_c, \"AdminImport\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","AdminImport","_s","textContent","setTextContent","isImporting","setIsImporting","isGenerating","setIsGenerating","progress","setProgress","importResult","setImportResult","showPreview","setShowPreview","fileInputRef","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsText","handleTextChange","value","previewWords","trim","alert","parseWords","text","lines","split","filter","line","words","forEach","index","trimmedLine","english","hebrew","includes","parts","length","toLowerCase","slice","join","separator","hebrewCharRegex","englishEndIndex","i","test","push","lineNumber","startImport","totalWords","parsedWords","processed","progressInterval","setInterval","Math","ceil","total","added","floor","skipped","errors","percentage","round","clearInterval","response","post","data","error","_error$response","_error$response$data","console","resetForm","current","handleDeleteAll","confirmMessage","userConfirmed","window","confirm","finalConfirm","deletedCount","location","reload","_error$response2","_error$response2$data","message","handleGenerateSentences","details","updated","_error$response3","_error$response3$data","className","children","fileName","_jsxFileName","columnNumber","type","accept","onChange","ref","placeholder","rows","onClick","disabled","map","word","dir","title","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Magshimim/Documents/wordGame/client/src/components/AdminImport.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './AdminImport.css';\r\n\r\nconst AdminImport = () => {\r\n  const [textContent, setTextContent] = useState('');\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [progress, setProgress] = useState(null);\r\n  const [importResult, setImportResult] = useState(null);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const fileInputRef = useRef(null);\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setTextContent(e.target.result);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    setTextContent(e.target.value);\r\n  };\r\n\r\n  const previewWords = () => {\r\n    if (!textContent.trim()) {\r\n      alert('Please enter or upload text content first');\r\n      return;\r\n    }\r\n    setShowPreview(true);\r\n  };\r\n\r\n  const parseWords = (text) => {\r\n    const lines = text.split('\\n').filter(line => line.trim());\r\n    const words = [];\r\n    \r\n    lines.forEach((line, index) => {\r\n      const trimmedLine = line.trim();\r\n      \r\n      // Try different parsing strategies\r\n      let english, hebrew;\r\n      \r\n      // Strategy 1: Look for tab separator\r\n      if (trimmedLine.includes('\\t')) {\r\n        const parts = trimmedLine.split('\\t');\r\n        if (parts.length >= 2) {\r\n          english = parts[0].toLowerCase().trim();\r\n          hebrew = parts.slice(1).join('\\t').trim();\r\n        }\r\n      }\r\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\r\n      else if (trimmedLine.includes('  ')) {\r\n        const parts = trimmedLine.split(/\\s{2,}/);\r\n        if (parts.length >= 2) {\r\n          english = parts[0].toLowerCase().trim();\r\n          hebrew = parts.slice(1).join(' ').trim();\r\n        }\r\n      }\r\n      // Strategy 3: Look for common separators like |, -, or :\r\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\r\n        const separator = trimmedLine.includes('|') ? '|' : \r\n                        trimmedLine.includes('-') ? '-' : ':';\r\n        const parts = trimmedLine.split(separator);\r\n        if (parts.length >= 2) {\r\n          english = parts[0].toLowerCase().trim();\r\n          hebrew = parts.slice(1).join(separator).trim();\r\n        }\r\n      }\r\n      // Strategy 4: Fallback to original logic but with better hebrew detection\r\n      else {\r\n        const parts = trimmedLine.split(/\\s+/);\r\n        if (parts.length >= 2) {\r\n          // Try to find where English ends and Hebrew begins\r\n          // Hebrew text typically contains Hebrew characters\r\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\r\n          \r\n          let englishEndIndex = 0;\r\n          for (let i = 0; i < parts.length; i++) {\r\n            if (hebrewCharRegex.test(parts[i])) {\r\n              englishEndIndex = i;\r\n              break;\r\n            }\r\n          }\r\n          \r\n          // If no Hebrew characters found, assume last word is Hebrew\r\n          if (englishEndIndex === 0) {\r\n            englishEndIndex = parts.length - 1;\r\n          }\r\n          \r\n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\r\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\r\n        }\r\n      }\r\n      \r\n      if (english && hebrew) {\r\n        words.push({\r\n          english,\r\n          hebrew,\r\n          lineNumber: index + 1\r\n        });\r\n      }\r\n    });\r\n    \r\n    return words;\r\n  };\r\n\r\n  const startImport = async () => {\r\n    if (!textContent.trim()) {\r\n      alert('Please enter or upload text content first');\r\n      return;\r\n    }\r\n\r\n    setIsImporting(true);\r\n    setProgress(null);\r\n    setImportResult(null);\r\n\r\n    try {\r\n      // Show progress simulation\r\n      const totalWords = parsedWords.length;\r\n      let processed = 0;\r\n      \r\n      const progressInterval = setInterval(() => {\r\n        processed += Math.ceil(totalWords / 20); // Update every 5%\r\n        if (processed >= totalWords) {\r\n          processed = totalWords;\r\n        }\r\n        \r\n        setProgress({\r\n          processed,\r\n          total: totalWords,\r\n          added: Math.floor(processed * 0.8), // Simulate 80% success rate\r\n          skipped: Math.floor(processed * 0.2), // Simulate 20% duplicates\r\n          errors: 0,\r\n          percentage: Math.round((processed / totalWords) * 100)\r\n        });\r\n        \r\n        if (processed >= totalWords) {\r\n          clearInterval(progressInterval);\r\n        }\r\n      }, 100);\r\n\r\n      // Send the import request\r\n      const response = await axios.post('/api/words/import', { textContent });\r\n      \r\n      clearInterval(progressInterval);\r\n      setImportResult(response.data);\r\n      setIsImporting(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Error importing words:', error);\r\n      setImportResult({ error: error.response?.data?.error || 'Failed to import words' });\r\n      setIsImporting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setTextContent('');\r\n    setProgress(null);\r\n    setImportResult(null);\r\n    setShowPreview(false);\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const handleDeleteAll = async () => {\r\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\r\n    const userConfirmed = window.confirm(confirmMessage);\r\n    \r\n    if (userConfirmed) {\r\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\r\n      if (finalConfirm) {\r\n        try {\r\n          const response = await axios.post('/api/words/clear-all', { confirm: true });\r\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\r\n          // Refresh the page\r\n          window.location.reload();\r\n        } catch (error) {\r\n          console.error('Error deleting all words:', error);\r\n          alert('Failed to delete all words: ' + (error.response?.data?.error || error.message));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGenerateSentences = async () => {\r\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\r\n    const userConfirmed = window.confirm(confirmMessage);\r\n    \r\n    if (userConfirmed) {\r\n      setIsGenerating(true);\r\n      try {\r\n        const response = await axios.post('/api/words/generate-sentences');\r\n        alert(`Successfully generated sentences for ${response.data.details.updated} words.\\n\\nProcessed: ${response.data.details.processed}\\nUpdated: ${response.data.details.updated}\\nErrors: ${response.data.details.errors}`);\r\n        // Refresh the page to show new sentences\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.error('Error generating sentences:', error);\r\n        alert('Failed to generate sentences: ' + (error.response?.data?.error || error.message));\r\n      } finally {\r\n        setIsGenerating(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const parsedWords = parseWords(textContent);\r\n\r\n  return (\r\n    <div className=\"admin-import\">\r\n      <div className=\"admin-import-header\">\r\n        <h2>Bulk Import Words</h2>\r\n        <p>Import multiple words from a text file or paste text directly. Supports multiple formats:</p>\r\n        <ul className=\"format-help\">\r\n          <li><strong>Tab-separated:</strong> \"english\\tעברית\"</li>\r\n          <li><strong>Double space:</strong> \"english  עברית\"</li>\r\n          <li><strong>Separators:</strong> \"english|עברית\", \"english-עברית\", \"english:עברית\"</li>\r\n          <li><strong>Auto-detect:</strong> \"english phrase עברית\" (automatically detects Hebrew characters)</li>\r\n          <li><strong>Auto-difficulty:</strong> Difficulty levels are automatically assessed based on word complexity</li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"import-section\">\r\n        <div className=\"file-upload-section\">\r\n          <h3>Upload Text File</h3>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt,.csv\"\r\n            onChange={handleFileUpload}\r\n            ref={fileInputRef}\r\n            className=\"file-input\"\r\n          />\r\n          <p className=\"file-help\">Supported formats: .txt, .csv (UTF-8 encoding)</p>\r\n        </div>\r\n\r\n        <div className=\"text-input-section\">\r\n          <h3>Or Paste Text Directly</h3>\r\n          <textarea\r\n            value={textContent}\r\n            onChange={handleTextChange}\r\n            placeholder=\"Enter words in any format:&#10;hello שלום&#10;according to  על פי&#10;good morning|בוקר טוב&#10;thank you-תודה&#10;how are you:איך אתה\"\r\n            rows={10}\r\n            className=\"text-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"preview-section\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={previewWords}\r\n            disabled={!textContent.trim()}\r\n          >\r\n            Preview Words ({parsedWords.length} found)\r\n          </button>\r\n        </div>\r\n\r\n        {showPreview && parsedWords.length > 0 && (\r\n          <div className=\"words-preview\">\r\n            <h3>Preview ({parsedWords.length} words)</h3>\r\n            <div className=\"preview-table\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>English</th>\r\n                    <th>Hebrew</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {parsedWords.slice(0, 20).map((word, index) => (\r\n                    <tr key={index}>\r\n                      <td>{word.lineNumber}</td>\r\n                      <td>{word.english}</td>\r\n                      <td dir=\"rtl\">{word.hebrew}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              {parsedWords.length > 20 && (\r\n                <p className=\"preview-note\">Showing first 20 words. Total: {parsedWords.length}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"import-actions\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={startImport}\r\n            disabled={isImporting || !textContent.trim()}\r\n          >\r\n            {isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`}\r\n          </button>\r\n          \r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={resetForm}\r\n            disabled={isImporting}\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={handleDeleteAll}\r\n            disabled={isImporting}\r\n            title=\"Delete all words from database (Admin only)\"\r\n          >\r\n            🗑️ Delete All Words\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            onClick={handleGenerateSentences}\r\n            disabled={isGenerating || isImporting}\r\n            title=\"Generate example sentences for existing words\"\r\n          >\r\n            {isGenerating ? 'Generating...' : '📝 Generate Sentences'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {isImporting && progress && (\r\n        <div className=\"import-progress\">\r\n          <h3>Import Progress</h3>\r\n          <div className=\"progress-bar\">\r\n            <div \r\n              className=\"progress-fill\"\r\n              style={{ width: `${progress.percentage}%` }}\r\n            ></div>\r\n          </div>\r\n          <div className=\"progress-stats\">\r\n            <p>Processed: {progress.processed} / {progress.total} ({progress.percentage}%)</p>\r\n            <p>Added: {progress.added} | Skipped: {progress.skipped} | Errors: {progress.errors}</p>\r\n            <p>Estimated time remaining: {Math.ceil((progress.total - progress.processed) / 10)} seconds</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {importResult && (\r\n        <div className={`import-result ${importResult.error ? 'error' : 'success'}`}>\r\n          <h3>Import Complete</h3>\r\n          {importResult.error ? (\r\n            <p className=\"error-message\">{importResult.error}</p>\r\n          ) : (\r\n            <div className=\"result-stats\">\r\n              <p><strong>Total processed:</strong> {importResult.total}</p>\r\n              <p><strong>Successfully added:</strong> {importResult.added}</p>\r\n              <p><strong>Skipped (already exist):</strong> {importResult.skipped}</p>\r\n              <p><strong>Errors:</strong> {importResult.errors}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"import-info\">\r\n        <h3>Import Instructions:</h3>\r\n        <ul>\r\n          <li>Format: \"english hebrew\" (one word per line)</li>\r\n          <li>English words will be converted to lowercase</li>\r\n          <li>Duplicate words will be skipped automatically</li>\r\n          <li>All imported words start at difficulty level 1 and user level 0</li>\r\n          <li>Maximum file size: 10MB</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminImport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}