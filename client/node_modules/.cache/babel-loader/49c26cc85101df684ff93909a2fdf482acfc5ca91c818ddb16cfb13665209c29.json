{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Magshimim\\\\Documents\\\\wordGame\\\\client\\\\src\\\\components\\\\AdminImport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminImport = () => {\n  _s();\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const fileInputRef = useRef(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleTextChange = e => {\n    setTextContent(e.target.value);\n  };\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n  const parseWords = text => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    lines.forEach((line, index) => {\n      const parts = line.trim().split(/\\s+/);\n      if (parts.length >= 2) {\n        const english = parts[0].toLowerCase().trim();\n        const hebrew = parts.slice(1).join(' ').trim();\n        if (english && hebrew) {\n          words.push({\n            english,\n            hebrew,\n            lineNumber: index + 1\n          });\n        }\n      }\n    });\n    return words;\n  };\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8),\n          // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2),\n          // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round(processed / totalWords * 100)\n        });\n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', {\n        textContent\n      });\n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error importing words:', error);\n      setImportResult({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to import words'\n      });\n      setIsImporting(false);\n    }\n  };\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const parsedWords = parseWords(textContent);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-import\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-import-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Bulk Import Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Import multiple words from a text file or paste text directly. Format: \\\"english hebrew\\\" (one word per line)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload Text File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt,.csv\",\n          onChange: handleFileUpload,\n          ref: fileInputRef,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-help\",\n          children: \"Supported formats: .txt, .csv (UTF-8 encoding)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Or Paste Text Directly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: textContent,\n          onChange: handleTextChange,\n          placeholder: \"Enter words in format:\\nhello \\u05E9\\u05DC\\u05D5\\u05DD\\nworld \\u05E2\\u05D5\\u05DC\\u05DD\\ngood \\u05D8\\u05D5\\u05D1\",\n          rows: 10,\n          className: \"text-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: previewWords,\n          disabled: !textContent.trim(),\n          children: [\"Preview Words (\", parsedWords.length, \" found)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), showPreview && parsedWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Preview (\", parsedWords.length, \" words)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"English\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Hebrew\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: parsedWords.slice(0, 20).map((word, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.lineNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.english\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  dir: \"rtl\",\n                  children: word.hebrew\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), parsedWords.length > 20 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"preview-note\",\n            children: [\"Showing first 20 words. Total: \", parsedWords.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: startImport,\n          disabled: isImporting || !textContent.trim(),\n          children: isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: resetForm,\n          disabled: isImporting,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), isImporting && progress && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress.percentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Processed: \", progress.processed, \" / \", progress.total, \" (\", progress.percentage, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Added: \", progress.added, \" | Skipped: \", progress.skipped, \" | Errors: \", progress.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Estimated time remaining: \", Math.ceil((progress.total - progress.processed) / 10), \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), importResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `import-result ${importResult.error ? 'error' : 'success'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), importResult.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: importResult.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total processed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 18\n          }, this), \" \", importResult.total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Successfully added:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 18\n          }, this), \" \", importResult.added]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Skipped (already exist):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 18\n          }, this), \" \", importResult.skipped]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Errors:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 18\n          }, this), \" \", importResult.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Format: \\\"english hebrew\\\" (one word per line)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"English words will be converted to lowercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Duplicate words will be skipped automatically\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"All imported words start at difficulty level 1 and user level 0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Maximum file size: 10MB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminImport, \"MB7moNC77CIy57e9sRHir+bO/vg=\");\n_c = AdminImport;\nexport default AdminImport;\nvar _c;\n$RefreshReg$(_c, \"AdminImport\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","AdminImport","_s","textContent","setTextContent","isImporting","setIsImporting","progress","setProgress","importResult","setImportResult","showPreview","setShowPreview","fileInputRef","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsText","handleTextChange","value","previewWords","trim","alert","parseWords","text","lines","split","filter","line","words","forEach","index","parts","length","english","toLowerCase","hebrew","slice","join","push","lineNumber","startImport","totalWords","parsedWords","processed","progressInterval","setInterval","Math","ceil","total","added","floor","skipped","errors","percentage","round","clearInterval","response","post","data","error","_error$response","_error$response$data","console","resetForm","current","className","children","fileName","_jsxFileName","columnNumber","type","accept","onChange","ref","placeholder","rows","onClick","disabled","map","word","dir","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Magshimim/Documents/wordGame/client/src/components/AdminImport.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport './AdminImport.css';\r\n\r\nconst AdminImport = () => {\r\n  const [textContent, setTextContent] = useState('');\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [progress, setProgress] = useState(null);\r\n  const [importResult, setImportResult] = useState(null);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const fileInputRef = useRef(null);\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setTextContent(e.target.result);\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    setTextContent(e.target.value);\r\n  };\r\n\r\n  const previewWords = () => {\r\n    if (!textContent.trim()) {\r\n      alert('Please enter or upload text content first');\r\n      return;\r\n    }\r\n    setShowPreview(true);\r\n  };\r\n\r\n  const parseWords = (text) => {\r\n    const lines = text.split('\\n').filter(line => line.trim());\r\n    const words = [];\r\n    \r\n    lines.forEach((line, index) => {\r\n      const parts = line.trim().split(/\\s+/);\r\n      if (parts.length >= 2) {\r\n        const english = parts[0].toLowerCase().trim();\r\n        const hebrew = parts.slice(1).join(' ').trim();\r\n        \r\n        if (english && hebrew) {\r\n          words.push({\r\n            english,\r\n            hebrew,\r\n            lineNumber: index + 1\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    return words;\r\n  };\r\n\r\n  const startImport = async () => {\r\n    if (!textContent.trim()) {\r\n      alert('Please enter or upload text content first');\r\n      return;\r\n    }\r\n\r\n    setIsImporting(true);\r\n    setProgress(null);\r\n    setImportResult(null);\r\n\r\n    try {\r\n      // Show progress simulation\r\n      const totalWords = parsedWords.length;\r\n      let processed = 0;\r\n      \r\n      const progressInterval = setInterval(() => {\r\n        processed += Math.ceil(totalWords / 20); // Update every 5%\r\n        if (processed >= totalWords) {\r\n          processed = totalWords;\r\n        }\r\n        \r\n        setProgress({\r\n          processed,\r\n          total: totalWords,\r\n          added: Math.floor(processed * 0.8), // Simulate 80% success rate\r\n          skipped: Math.floor(processed * 0.2), // Simulate 20% duplicates\r\n          errors: 0,\r\n          percentage: Math.round((processed / totalWords) * 100)\r\n        });\r\n        \r\n        if (processed >= totalWords) {\r\n          clearInterval(progressInterval);\r\n        }\r\n      }, 100);\r\n\r\n      // Send the import request\r\n      const response = await axios.post('/api/words/import', { textContent });\r\n      \r\n      clearInterval(progressInterval);\r\n      setImportResult(response.data);\r\n      setIsImporting(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Error importing words:', error);\r\n      setImportResult({ error: error.response?.data?.error || 'Failed to import words' });\r\n      setIsImporting(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setTextContent('');\r\n    setProgress(null);\r\n    setImportResult(null);\r\n    setShowPreview(false);\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = '';\r\n    }\r\n  };\r\n\r\n  const parsedWords = parseWords(textContent);\r\n\r\n  return (\r\n    <div className=\"admin-import\">\r\n      <div className=\"admin-import-header\">\r\n        <h2>Bulk Import Words</h2>\r\n        <p>Import multiple words from a text file or paste text directly. Format: \"english hebrew\" (one word per line)</p>\r\n      </div>\r\n\r\n      <div className=\"import-section\">\r\n        <div className=\"file-upload-section\">\r\n          <h3>Upload Text File</h3>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".txt,.csv\"\r\n            onChange={handleFileUpload}\r\n            ref={fileInputRef}\r\n            className=\"file-input\"\r\n          />\r\n          <p className=\"file-help\">Supported formats: .txt, .csv (UTF-8 encoding)</p>\r\n        </div>\r\n\r\n        <div className=\"text-input-section\">\r\n          <h3>Or Paste Text Directly</h3>\r\n          <textarea\r\n            value={textContent}\r\n            onChange={handleTextChange}\r\n            placeholder=\"Enter words in format:&#10;hello שלום&#10;world עולם&#10;good טוב\"\r\n            rows={10}\r\n            className=\"text-input\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"preview-section\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={previewWords}\r\n            disabled={!textContent.trim()}\r\n          >\r\n            Preview Words ({parsedWords.length} found)\r\n          </button>\r\n        </div>\r\n\r\n        {showPreview && parsedWords.length > 0 && (\r\n          <div className=\"words-preview\">\r\n            <h3>Preview ({parsedWords.length} words)</h3>\r\n            <div className=\"preview-table\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>#</th>\r\n                    <th>English</th>\r\n                    <th>Hebrew</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {parsedWords.slice(0, 20).map((word, index) => (\r\n                    <tr key={index}>\r\n                      <td>{word.lineNumber}</td>\r\n                      <td>{word.english}</td>\r\n                      <td dir=\"rtl\">{word.hebrew}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              {parsedWords.length > 20 && (\r\n                <p className=\"preview-note\">Showing first 20 words. Total: {parsedWords.length}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"import-actions\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={startImport}\r\n            disabled={isImporting || !textContent.trim()}\r\n          >\r\n            {isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`}\r\n          </button>\r\n          \r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={resetForm}\r\n            disabled={isImporting}\r\n          >\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {isImporting && progress && (\r\n        <div className=\"import-progress\">\r\n          <h3>Import Progress</h3>\r\n          <div className=\"progress-bar\">\r\n            <div \r\n              className=\"progress-fill\"\r\n              style={{ width: `${progress.percentage}%` }}\r\n            ></div>\r\n          </div>\r\n          <div className=\"progress-stats\">\r\n            <p>Processed: {progress.processed} / {progress.total} ({progress.percentage}%)</p>\r\n            <p>Added: {progress.added} | Skipped: {progress.skipped} | Errors: {progress.errors}</p>\r\n            <p>Estimated time remaining: {Math.ceil((progress.total - progress.processed) / 10)} seconds</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {importResult && (\r\n        <div className={`import-result ${importResult.error ? 'error' : 'success'}`}>\r\n          <h3>Import Complete</h3>\r\n          {importResult.error ? (\r\n            <p className=\"error-message\">{importResult.error}</p>\r\n          ) : (\r\n            <div className=\"result-stats\">\r\n              <p><strong>Total processed:</strong> {importResult.total}</p>\r\n              <p><strong>Successfully added:</strong> {importResult.added}</p>\r\n              <p><strong>Skipped (already exist):</strong> {importResult.skipped}</p>\r\n              <p><strong>Errors:</strong> {importResult.errors}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"import-info\">\r\n        <h3>Import Instructions:</h3>\r\n        <ul>\r\n          <li>Format: \"english hebrew\" (one word per line)</li>\r\n          <li>English words will be converted to lowercase</li>\r\n          <li>Duplicate words will be skipped automatically</li>\r\n          <li>All imported words start at difficulty level 1 and user level 0</li>\r\n          <li>Maximum file size: 10MB</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminImport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}