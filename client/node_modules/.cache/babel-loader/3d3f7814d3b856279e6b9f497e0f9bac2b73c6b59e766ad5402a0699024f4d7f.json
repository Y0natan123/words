{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Magshimim\\\\Documents\\\\wordGame\\\\Y0natan123.github.io\\\\client\\\\src\\\\components\\\\AdminImport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminImport = () => {\n  _s();\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [words, setWords] = useState([]);\n  const [activeTab, setActiveTab] = useState('import');\n  const [searchTerm, setSearchTerm] = useState('');\n  const fileInputRef = useRef(null);\n\n  // Load words for admin management\n  useEffect(() => {\n    if (activeTab === 'manage') {\n      fetchWords();\n    }\n  }, [activeTab]);\n  const fetchWords = async () => {\n    try {\n      const response = await axios.get('/api/words');\n      setWords(response.data);\n    } catch (error) {\n      console.error('Error fetching words:', error);\n    }\n  };\n  const handleDeleteWord = async wordId => {\n    if (window.confirm('Are you sure you want to delete this word?')) {\n      try {\n        await axios.delete(`/api/words/${wordId}`);\n        setWords(words.filter(word => word.id !== wordId));\n        alert('Word deleted successfully');\n      } catch (error) {\n        console.error('Error deleting word:', error);\n        alert('Failed to delete word');\n      }\n    }\n  };\n  const reassessDifficulty = async word => {\n    try {\n      const response = await axios.post('/api/ai/assess-difficulty', {\n        word: word.english,\n        context: `Hebrew translation: ${word.hebrew}`\n      });\n      const newDifficulty = response.data.difficulty;\n      const updateResponse = await axios.put(`/api/words/${word.id}`, {\n        difficulty: newDifficulty\n      });\n\n      // Update the word in the local state\n      setWords(words.map(w => w.id === word.id ? updateResponse.data : w));\n      alert(`Difficulty reassessed: Level ${newDifficulty}`);\n    } catch (error) {\n      console.error('Error reassessing difficulty:', error);\n      alert('Failed to reassess difficulty');\n    }\n  };\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleTextChange = e => {\n    setTextContent(e.target.value);\n  };\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n  const parseWords = text => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Try different parsing strategies\n      let english, hebrew;\n\n      // Strategy 1: Look for tab separator\n      if (trimmedLine.includes('\\t')) {\n        const parts = trimmedLine.split('\\t');\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join('\\t').trim();\n        }\n      }\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\n      else if (trimmedLine.includes('  ')) {\n        const parts = trimmedLine.split(/\\s{2,}/);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(' ').trim();\n        }\n      }\n      // Strategy 3: Look for common separators like |, -, or :\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\n        const separator = trimmedLine.includes('|') ? '|' : trimmedLine.includes('-') ? '-' : ':';\n        const parts = trimmedLine.split(separator);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(separator).trim();\n        }\n      }\n      // Strategy 4: Fallback to original logic but with better hebrew detection\n      else {\n        const parts = trimmedLine.split(/\\s+/);\n        if (parts.length >= 2) {\n          // Try to find where English ends and Hebrew begins\n          // Hebrew text typically contains Hebrew characters\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n          let englishEndIndex = 0;\n          for (let i = 0; i < parts.length; i++) {\n            if (hebrewCharRegex.test(parts[i])) {\n              englishEndIndex = i;\n              break;\n            }\n          }\n\n          // If no Hebrew characters found, assume last word is Hebrew\n          if (englishEndIndex === 0) {\n            englishEndIndex = parts.length - 1;\n          }\n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\n        }\n      }\n      if (english && hebrew) {\n        words.push({\n          english,\n          hebrew,\n          lineNumber: index + 1\n        });\n      }\n    });\n    return words;\n  };\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8),\n          // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2),\n          // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round(processed / totalWords * 100)\n        });\n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', {\n        textContent\n      });\n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error importing words:', error);\n      setImportResult({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to import words'\n      });\n      setIsImporting(false);\n    }\n  };\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleDeleteAll = async () => {\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\n      if (finalConfirm) {\n        try {\n          const response = await axios.post('/api/words/clear-all', {\n            confirm: true\n          });\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\n          // Refresh the page\n          window.location.reload();\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          console.error('Error deleting all words:', error);\n          alert('Failed to delete all words: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message));\n        }\n      }\n    }\n  };\n  const handleGenerateSentences = async () => {\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      setIsGenerating(true);\n      try {\n        const response = await axios.post('/api/words/generate-sentences');\n        const details = response.data.details;\n        alert(`‚úÖ Successfully generated sentences!\\n\\nüìä Results:\\n‚Ä¢ Processed: ${details.processed} words\\n‚Ä¢ Updated: ${details.updated} words\\n‚Ä¢ Errors: ${details.errors} words\\n\\nüìù All sentences were generated using high-quality educational templates matched to difficulty levels.`);\n        // Refresh the page to show new sentences\n        window.location.reload();\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.error('Error generating sentences:', error);\n        alert('‚ùå Failed to generate sentences: ' + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message));\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n  };\n  const parsedWords = parseWords(textContent);\n\n  // Filter words for management tab\n  const filteredWords = words.filter(word => word.english.toLowerCase().includes(searchTerm.toLowerCase()) || word.hebrew.includes(searchTerm));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-import\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === 'import' ? 'active' : ''}`,\n        onClick: () => setActiveTab('import'),\n        children: \"\\uD83D\\uDCE5 Import Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${activeTab === 'manage' ? 'active' : ''}`,\n        onClick: () => setActiveTab('manage'),\n        children: \"\\u2699\\uFE0F Manage Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), activeTab === 'import' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-import-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Bulk Import Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Import multiple words from a text file or paste text directly. Supports multiple formats:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"format-help\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Tab-separated:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }, this), \" \\\"english\\\\t\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Double space:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this), \" \\\"english  \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Separators:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 19\n            }, this), \" \\\"english|\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english-\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english:\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Auto-detect:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 19\n            }, this), \" \\\"english phrase \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\" (automatically detects Hebrew characters)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Auto-difficulty:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 19\n            }, this), \" Difficulty levels are automatically assessed based on word complexity\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Upload Text File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".txt,.csv\",\n            onChange: handleFileUpload,\n            ref: fileInputRef,\n            className: \"file-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-help\",\n            children: \"Supported formats: .txt, .csv (UTF-8 encoding)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Or Paste Text Directly\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: textContent,\n            onChange: handleTextChange,\n            placeholder: \"Enter words in any format:\\nhello \\u05E9\\u05DC\\u05D5\\u05DD\\naccording to  \\u05E2\\u05DC \\u05E4\\u05D9\\ngood morning|\\u05D1\\u05D5\\u05E7\\u05E8 \\u05D8\\u05D5\\u05D1\\nthank you-\\u05EA\\u05D5\\u05D3\\u05D4\\nhow are you:\\u05D0\\u05D9\\u05DA \\u05D0\\u05EA\\u05D4\",\n            rows: 10,\n            className: \"text-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary\",\n            onClick: previewWords,\n            disabled: !textContent.trim(),\n            children: [\"Preview Words (\", parsedWords.length, \" found)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }, this), showPreview && parsedWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"words-preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Preview (\", parsedWords.length, \" words)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"table\", {\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"#\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"English\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Hebrew\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: parsedWords.slice(0, 20).map((word, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: word.lineNumber\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: word.english\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    dir: \"rtl\",\n                    children: word.hebrew\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 23\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), parsedWords.length > 20 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"preview-note\",\n              children: [\"Showing first 20 words. Total: \", parsedWords.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"import-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-primary\",\n            onClick: startImport,\n            disabled: isImporting || !textContent.trim(),\n            children: isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary\",\n            onClick: resetForm,\n            disabled: isImporting,\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-danger\",\n            onClick: handleDeleteAll,\n            disabled: isImporting,\n            title: \"Delete all words from database (Admin only)\",\n            children: \"\\uD83D\\uDDD1\\uFE0F Delete All Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-success\",\n            onClick: handleGenerateSentences,\n            disabled: isGenerating || isImporting,\n            title: \"Generate example sentences for existing words\",\n            children: isGenerating ? 'Generating...' : 'üìù Generate Sentences'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }, this), isImporting && progress && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Import Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${progress.percentage}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Processed: \", progress.processed, \" / \", progress.total, \" (\", progress.percentage, \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Added: \", progress.added, \" | Skipped: \", progress.skipped, \" | Errors: \", progress.errors]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Estimated time remaining: \", Math.ceil((progress.total - progress.processed) / 10), \" seconds\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), importResult && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `import-result ${importResult.error ? 'error' : 'success'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Import Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), importResult.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: importResult.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Total processed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 18\n            }, this), \" \", importResult.total]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Successfully added:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 18\n            }, this), \" \", importResult.added]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Skipped (already exist):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 18\n            }, this), \" \", importResult.skipped]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Errors:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 18\n            }, this), \" \", importResult.errors]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Import Instructions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Format: \\\"english hebrew\\\" (one word per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"English words will be converted to lowercase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Duplicate words will be skipped automatically\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"All imported words start at difficulty level 1 and user level 0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Maximum file size: 10MB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), activeTab === 'manage' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-management\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"management-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Word Management\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Manage existing words - reassess difficulty levels and delete words.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Search words...\",\n            value: searchTerm,\n            onChange: e => setSearchTerm(e.target.value),\n            className: \"search-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"word-count\",\n            children: [filteredWords.length, \" words found\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words-grid\",\n        children: filteredWords.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-words\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"No words found. \", searchTerm ? 'Try a different search term.' : 'Import some words first.']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 15\n        }, this) : filteredWords.map(word => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-word-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"english\",\n              children: word.english\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"hebrew\",\n              children: word.hebrew\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-stats\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat\",\n                children: [\"Level: \", word.userLevel, \"/5\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat\",\n                children: [\"Difficulty: \", word.difficulty, \"/5\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"word-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary\",\n              onClick: () => reassessDifficulty(word),\n              title: \"Reassess difficulty\",\n              children: \"\\uD83D\\uDD04 Reassess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger\",\n              onClick: () => handleDeleteWord(word.id),\n              title: \"Delete word\",\n              children: \"\\uD83D\\uDDD1\\uFE0F Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 19\n          }, this)]\n        }, word.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminImport, \"LABNSkcYO/+cxV8MRqdTqDX3SXc=\");\n_c = AdminImport;\nexport default AdminImport;\nvar _c;\n$RefreshReg$(_c, \"AdminImport\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminImport","_s","textContent","setTextContent","isImporting","setIsImporting","isGenerating","setIsGenerating","progress","setProgress","importResult","setImportResult","showPreview","setShowPreview","words","setWords","activeTab","setActiveTab","searchTerm","setSearchTerm","fileInputRef","fetchWords","response","get","data","error","console","handleDeleteWord","wordId","window","confirm","delete","filter","word","id","alert","reassessDifficulty","post","english","context","hebrew","newDifficulty","difficulty","updateResponse","put","map","w","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsText","handleTextChange","value","previewWords","trim","parseWords","text","lines","split","line","forEach","index","trimmedLine","includes","parts","length","toLowerCase","slice","join","separator","hebrewCharRegex","englishEndIndex","i","test","push","lineNumber","startImport","totalWords","parsedWords","processed","progressInterval","setInterval","Math","ceil","total","added","floor","skipped","errors","percentage","round","clearInterval","_error$response","_error$response$data","resetForm","current","handleDeleteAll","confirmMessage","userConfirmed","finalConfirm","deletedCount","location","reload","_error$response2","_error$response2$data","message","handleGenerateSentences","details","updated","_error$response3","_error$response3$data","filteredWords","className","children","onClick","fileName","_jsxFileName","columnNumber","type","accept","onChange","ref","placeholder","rows","disabled","dir","title","style","width","userLevel","_c","$RefreshReg$"],"sources":["C:/Users/Magshimim/Documents/wordGame/Y0natan123.github.io/client/src/components/AdminImport.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\n\nconst AdminImport = () => {\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [words, setWords] = useState([]);\n  const [activeTab, setActiveTab] = useState('import');\n  const [searchTerm, setSearchTerm] = useState('');\n  const fileInputRef = useRef(null);\n\n  // Load words for admin management\n  useEffect(() => {\n    if (activeTab === 'manage') {\n      fetchWords();\n    }\n  }, [activeTab]);\n\n  const fetchWords = async () => {\n    try {\n      const response = await axios.get('/api/words');\n      setWords(response.data);\n    } catch (error) {\n      console.error('Error fetching words:', error);\n    }\n  };\n\n  const handleDeleteWord = async (wordId) => {\n    if (window.confirm('Are you sure you want to delete this word?')) {\n      try {\n        await axios.delete(`/api/words/${wordId}`);\n        setWords(words.filter(word => word.id !== wordId));\n        alert('Word deleted successfully');\n      } catch (error) {\n        console.error('Error deleting word:', error);\n        alert('Failed to delete word');\n      }\n    }\n  };\n\n  const reassessDifficulty = async (word) => {\n    try {\n      const response = await axios.post('/api/ai/assess-difficulty', {\n        word: word.english,\n        context: `Hebrew translation: ${word.hebrew}`\n      });\n      const newDifficulty = response.data.difficulty;\n      const updateResponse = await axios.put(`/api/words/${word.id}`, { difficulty: newDifficulty });\n      \n      // Update the word in the local state\n      setWords(words.map(w => w.id === word.id ? updateResponse.data : w));\n      alert(`Difficulty reassessed: Level ${newDifficulty}`);\n    } catch (error) {\n      console.error('Error reassessing difficulty:', error);\n      alert('Failed to reassess difficulty');\n    }\n  };\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleTextChange = (e) => {\n    setTextContent(e.target.value);\n  };\n\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n\n  const parseWords = (text) => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    \n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Try different parsing strategies\n      let english, hebrew;\n      \n      // Strategy 1: Look for tab separator\n      if (trimmedLine.includes('\\t')) {\n        const parts = trimmedLine.split('\\t');\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join('\\t').trim();\n        }\n      }\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\n      else if (trimmedLine.includes('  ')) {\n        const parts = trimmedLine.split(/\\s{2,}/);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(' ').trim();\n        }\n      }\n      // Strategy 3: Look for common separators like |, -, or :\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\n        const separator = trimmedLine.includes('|') ? '|' : \n                        trimmedLine.includes('-') ? '-' : ':';\n        const parts = trimmedLine.split(separator);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(separator).trim();\n        }\n      }\n      // Strategy 4: Fallback to original logic but with better hebrew detection\n      else {\n        const parts = trimmedLine.split(/\\s+/);\n        if (parts.length >= 2) {\n          // Try to find where English ends and Hebrew begins\n          // Hebrew text typically contains Hebrew characters\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n          \n          let englishEndIndex = 0;\n          for (let i = 0; i < parts.length; i++) {\n            if (hebrewCharRegex.test(parts[i])) {\n              englishEndIndex = i;\n              break;\n            }\n          }\n          \n          // If no Hebrew characters found, assume last word is Hebrew\n          if (englishEndIndex === 0) {\n            englishEndIndex = parts.length - 1;\n          }\n          \n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\n        }\n      }\n      \n      if (english && hebrew) {\n        words.push({\n          english,\n          hebrew,\n          lineNumber: index + 1\n        });\n      }\n    });\n    \n    return words;\n  };\n\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      \n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        \n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8), // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2), // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round((processed / totalWords) * 100)\n        });\n        \n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', { textContent });\n      \n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n      \n    } catch (error) {\n      console.error('Error importing words:', error);\n      setImportResult({ error: error.response?.data?.error || 'Failed to import words' });\n      setIsImporting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDeleteAll = async () => {\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\n    const userConfirmed = window.confirm(confirmMessage);\n    \n    if (userConfirmed) {\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\n      if (finalConfirm) {\n        try {\n          const response = await axios.post('/api/words/clear-all', { confirm: true });\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\n          // Refresh the page\n          window.location.reload();\n        } catch (error) {\n          console.error('Error deleting all words:', error);\n          alert('Failed to delete all words: ' + (error.response?.data?.error || error.message));\n        }\n      }\n    }\n  };\n\n  const handleGenerateSentences = async () => {\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\n    const userConfirmed = window.confirm(confirmMessage);\n    \n    if (userConfirmed) {\n      setIsGenerating(true);\n      try {\n        const response = await axios.post('/api/words/generate-sentences');\n        const details = response.data.details;\n        alert(`‚úÖ Successfully generated sentences!\\n\\nüìä Results:\\n‚Ä¢ Processed: ${details.processed} words\\n‚Ä¢ Updated: ${details.updated} words\\n‚Ä¢ Errors: ${details.errors} words\\n\\nüìù All sentences were generated using high-quality educational templates matched to difficulty levels.`);\n        // Refresh the page to show new sentences\n        window.location.reload();\n      } catch (error) {\n        console.error('Error generating sentences:', error);\n        alert('‚ùå Failed to generate sentences: ' + (error.response?.data?.error || error.message));\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n  };\n\n  const parsedWords = parseWords(textContent);\n\n  // Filter words for management tab\n  const filteredWords = words.filter(word => \n    word.english.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    word.hebrew.includes(searchTerm)\n  );\n\n  return (\n    <div className=\"admin-import\">\n      {/* Tab Navigation */}\n      <div className=\"admin-tabs\">\n        <button \n          className={`tab-btn ${activeTab === 'import' ? 'active' : ''}`}\n          onClick={() => setActiveTab('import')}\n        >\n          üì• Import Words\n        </button>\n        <button \n          className={`tab-btn ${activeTab === 'manage' ? 'active' : ''}`}\n          onClick={() => setActiveTab('manage')}\n        >\n          ‚öôÔ∏è Manage Words\n        </button>\n      </div>\n\n      {/* Import Tab */}\n      {activeTab === 'import' && (\n        <>\n          <div className=\"admin-import-header\">\n            <h2>Bulk Import Words</h2>\n            <p>Import multiple words from a text file or paste text directly. Supports multiple formats:</p>\n            <ul className=\"format-help\">\n              <li><strong>Tab-separated:</strong> \"english\\t◊¢◊ë◊®◊ô◊™\"</li>\n              <li><strong>Double space:</strong> \"english  ◊¢◊ë◊®◊ô◊™\"</li>\n              <li><strong>Separators:</strong> \"english|◊¢◊ë◊®◊ô◊™\", \"english-◊¢◊ë◊®◊ô◊™\", \"english:◊¢◊ë◊®◊ô◊™\"</li>\n              <li><strong>Auto-detect:</strong> \"english phrase ◊¢◊ë◊®◊ô◊™\" (automatically detects Hebrew characters)</li>\n              <li><strong>Auto-difficulty:</strong> Difficulty levels are automatically assessed based on word complexity</li>\n            </ul>\n          </div>\n\n      <div className=\"import-section\">\n        <div className=\"file-upload-section\">\n          <h3>Upload Text File</h3>\n          <input\n            type=\"file\"\n            accept=\".txt,.csv\"\n            onChange={handleFileUpload}\n            ref={fileInputRef}\n            className=\"file-input\"\n          />\n          <p className=\"file-help\">Supported formats: .txt, .csv (UTF-8 encoding)</p>\n        </div>\n\n        <div className=\"text-input-section\">\n          <h3>Or Paste Text Directly</h3>\n          <textarea\n            value={textContent}\n            onChange={handleTextChange}\n            placeholder=\"Enter words in any format:&#10;hello ◊©◊ú◊ï◊ù&#10;according to  ◊¢◊ú ◊§◊ô&#10;good morning|◊ë◊ï◊ß◊® ◊ò◊ï◊ë&#10;thank you-◊™◊ï◊ì◊î&#10;how are you:◊ê◊ô◊ö ◊ê◊™◊î\"\n            rows={10}\n            className=\"text-input\"\n          />\n        </div>\n\n        <div className=\"preview-section\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={previewWords}\n            disabled={!textContent.trim()}\n          >\n            Preview Words ({parsedWords.length} found)\n          </button>\n        </div>\n\n        {showPreview && parsedWords.length > 0 && (\n          <div className=\"words-preview\">\n            <h3>Preview ({parsedWords.length} words)</h3>\n            <div className=\"preview-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>English</th>\n                    <th>Hebrew</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {parsedWords.slice(0, 20).map((word, index) => (\n                    <tr key={index}>\n                      <td>{word.lineNumber}</td>\n                      <td>{word.english}</td>\n                      <td dir=\"rtl\">{word.hebrew}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {parsedWords.length > 20 && (\n                <p className=\"preview-note\">Showing first 20 words. Total: {parsedWords.length}</p>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"import-actions\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={startImport}\n            disabled={isImporting || !textContent.trim()}\n          >\n            {isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`}\n          </button>\n          \n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={resetForm}\n            disabled={isImporting}\n          >\n            Reset\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={handleDeleteAll}\n            disabled={isImporting}\n            title=\"Delete all words from database (Admin only)\"\n          >\n            üóëÔ∏è Delete All Words\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={handleGenerateSentences}\n            disabled={isGenerating || isImporting}\n            title=\"Generate example sentences for existing words\"\n          >\n            {isGenerating ? 'Generating...' : 'üìù Generate Sentences'}\n          </button>\n        </div>\n      </div>\n\n      {isImporting && progress && (\n        <div className=\"import-progress\">\n          <h3>Import Progress</h3>\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\"\n              style={{ width: `${progress.percentage}%` }}\n            ></div>\n          </div>\n          <div className=\"progress-stats\">\n            <p>Processed: {progress.processed} / {progress.total} ({progress.percentage}%)</p>\n            <p>Added: {progress.added} | Skipped: {progress.skipped} | Errors: {progress.errors}</p>\n            <p>Estimated time remaining: {Math.ceil((progress.total - progress.processed) / 10)} seconds</p>\n          </div>\n        </div>\n      )}\n\n      {importResult && (\n        <div className={`import-result ${importResult.error ? 'error' : 'success'}`}>\n          <h3>Import Complete</h3>\n          {importResult.error ? (\n            <p className=\"error-message\">{importResult.error}</p>\n          ) : (\n            <div className=\"result-stats\">\n              <p><strong>Total processed:</strong> {importResult.total}</p>\n              <p><strong>Successfully added:</strong> {importResult.added}</p>\n              <p><strong>Skipped (already exist):</strong> {importResult.skipped}</p>\n              <p><strong>Errors:</strong> {importResult.errors}</p>\n            </div>\n          )}\n        </div>\n      )}\n\n          <div className=\"import-info\">\n            <h3>Import Instructions:</h3>\n            <ul>\n              <li>Format: \"english hebrew\" (one word per line)</li>\n              <li>English words will be converted to lowercase</li>\n              <li>Duplicate words will be skipped automatically</li>\n              <li>All imported words start at difficulty level 1 and user level 0</li>\n              <li>Maximum file size: 10MB</li>\n            </ul>\n          </div>\n        </>\n      )}\n\n      {/* Manage Tab */}\n      {activeTab === 'manage' && (\n        <div className=\"word-management\">\n          <div className=\"management-header\">\n            <h2>Word Management</h2>\n            <p>Manage existing words - reassess difficulty levels and delete words.</p>\n            \n            <div className=\"search-section\">\n              <input\n                type=\"text\"\n                placeholder=\"Search words...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"search-input\"\n              />\n              <span className=\"word-count\">{filteredWords.length} words found</span>\n            </div>\n          </div>\n\n          <div className=\"words-grid\">\n            {filteredWords.length === 0 ? (\n              <div className=\"no-words\">\n                <p>No words found. {searchTerm ? 'Try a different search term.' : 'Import some words first.'}</p>\n              </div>\n            ) : (\n              filteredWords.map(word => (\n                <div key={word.id} className=\"admin-word-card\">\n                  <div className=\"word-info\">\n                    <h3 className=\"english\">{word.english}</h3>\n                    <p className=\"hebrew\">{word.hebrew}</p>\n                    <div className=\"word-stats\">\n                      <span className=\"stat\">Level: {word.userLevel}/5</span>\n                      <span className=\"stat\">Difficulty: {word.difficulty}/5</span>\n                    </div>\n                  </div>\n                  <div className=\"word-actions\">\n                    <button \n                      className=\"btn btn-secondary\"\n                      onClick={() => reassessDifficulty(word)}\n                      title=\"Reassess difficulty\"\n                    >\n                      üîÑ Reassess\n                    </button>\n                    <button \n                      className=\"btn btn-danger\"\n                      onClick={() => handleDeleteWord(word.id)}\n                      title=\"Delete word\"\n                    >\n                      üóëÔ∏è Delete\n                    </button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminImport; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,QAAQ,CAAC;EACpD,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM4B,YAAY,GAAG3B,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACAC,SAAS,CAAC,MAAM;IACd,IAAIsB,SAAS,KAAK,QAAQ,EAAE;MAC1BK,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EAEf,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAAC,YAAY,CAAC;MAC9CR,QAAQ,CAACO,QAAQ,CAACE,IAAI,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOC,MAAM,IAAK;IACzC,IAAIC,MAAM,CAACC,OAAO,CAAC,4CAA4C,CAAC,EAAE;MAChE,IAAI;QACF,MAAMnC,KAAK,CAACoC,MAAM,CAAC,cAAcH,MAAM,EAAE,CAAC;QAC1Cb,QAAQ,CAACD,KAAK,CAACkB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC,CAAC;QAClDO,KAAK,CAAC,2BAA2B,CAAC;MACpC,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CU,KAAK,CAAC,uBAAuB,CAAC;MAChC;IACF;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOH,IAAI,IAAK;IACzC,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAM3B,KAAK,CAAC0C,IAAI,CAAC,2BAA2B,EAAE;QAC7DJ,IAAI,EAAEA,IAAI,CAACK,OAAO;QAClBC,OAAO,EAAE,uBAAuBN,IAAI,CAACO,MAAM;MAC7C,CAAC,CAAC;MACF,MAAMC,aAAa,GAAGnB,QAAQ,CAACE,IAAI,CAACkB,UAAU;MAC9C,MAAMC,cAAc,GAAG,MAAMhD,KAAK,CAACiD,GAAG,CAAC,cAAcX,IAAI,CAACC,EAAE,EAAE,EAAE;QAAEQ,UAAU,EAAED;MAAc,CAAC,CAAC;;MAE9F;MACA1B,QAAQ,CAACD,KAAK,CAAC+B,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKD,IAAI,CAACC,EAAE,GAAGS,cAAc,CAACnB,IAAI,GAAGsB,CAAC,CAAC,CAAC;MACpEX,KAAK,CAAC,gCAAgCM,aAAa,EAAE,CAAC;IACxD,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDU,KAAK,CAAC,+BAA+B,CAAC;IACxC;EACF,CAAC;EAED,MAAMY,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACrBpD,cAAc,CAACoD,CAAC,CAACL,MAAM,CAACM,MAAM,CAAC;MACjC,CAAC;MACDJ,MAAM,CAACK,UAAU,CAACR,IAAI,CAAC;IACzB;EACF,CAAC;EAED,MAAMS,gBAAgB,GAAIH,CAAC,IAAK;IAC9BpD,cAAc,CAACoD,CAAC,CAACL,MAAM,CAACS,KAAK,CAAC;EAChC,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAAC1D,WAAW,CAAC2D,IAAI,CAAC,CAAC,EAAE;MACvB1B,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACF;IACAtB,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMiD,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACjC,MAAM,CAACkC,IAAI,IAAIA,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC;IAC1D,MAAM/C,KAAK,GAAG,EAAE;IAEhBkD,KAAK,CAACG,OAAO,CAAC,CAACD,IAAI,EAAEE,KAAK,KAAK;MAC7B,MAAMC,WAAW,GAAGH,IAAI,CAACL,IAAI,CAAC,CAAC;;MAE/B;MACA,IAAIvB,OAAO,EAAEE,MAAM;;MAEnB;MACA,IAAI6B,WAAW,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC9B,MAAMC,KAAK,GAAGF,WAAW,CAACJ,KAAK,CAAC,IAAI,CAAC;QACrC,IAAIM,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;UACrBlC,OAAO,GAAGiC,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACZ,IAAI,CAAC,CAAC;UACvCrB,MAAM,GAAG+B,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACd,IAAI,CAAC,CAAC;QAC3C;MACF;MACA;MAAA,KACK,IAAIQ,WAAW,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACnC,MAAMC,KAAK,GAAGF,WAAW,CAACJ,KAAK,CAAC,QAAQ,CAAC;QACzC,IAAIM,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;UACrBlC,OAAO,GAAGiC,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACZ,IAAI,CAAC,CAAC;UACvCrB,MAAM,GAAG+B,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC,CAAC;QAC1C;MACF;MACA;MAAA,KACK,IAAIQ,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,IAAID,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,IAAID,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC5F,MAAMM,SAAS,GAAGP,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GACjCD,WAAW,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;QACrD,MAAMC,KAAK,GAAGF,WAAW,CAACJ,KAAK,CAACW,SAAS,CAAC;QAC1C,IAAIL,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;UACrBlC,OAAO,GAAGiC,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACZ,IAAI,CAAC,CAAC;UACvCrB,MAAM,GAAG+B,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,SAAS,CAAC,CAACf,IAAI,CAAC,CAAC;QAChD;MACF;MACA;MAAA,KACK;QACH,MAAMU,KAAK,GAAGF,WAAW,CAACJ,KAAK,CAAC,KAAK,CAAC;QACtC,IAAIM,KAAK,CAACC,MAAM,IAAI,CAAC,EAAE;UACrB;UACA;UACA,MAAMK,eAAe,GAAG,8BAA8B;UAEtD,IAAIC,eAAe,GAAG,CAAC;UACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACC,MAAM,EAAEO,CAAC,EAAE,EAAE;YACrC,IAAIF,eAAe,CAACG,IAAI,CAACT,KAAK,CAACQ,CAAC,CAAC,CAAC,EAAE;cAClCD,eAAe,GAAGC,CAAC;cACnB;YACF;UACF;;UAEA;UACA,IAAID,eAAe,KAAK,CAAC,EAAE;YACzBA,eAAe,GAAGP,KAAK,CAACC,MAAM,GAAG,CAAC;UACpC;UAEAlC,OAAO,GAAGiC,KAAK,CAACG,KAAK,CAAC,CAAC,EAAEI,eAAe,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,CAACF,WAAW,CAAC,CAAC,CAACZ,IAAI,CAAC,CAAC;UACxErB,MAAM,GAAG+B,KAAK,CAACG,KAAK,CAACI,eAAe,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,CAACd,IAAI,CAAC,CAAC;QACxD;MACF;MAEA,IAAIvB,OAAO,IAAIE,MAAM,EAAE;QACrB1B,KAAK,CAACmE,IAAI,CAAC;UACT3C,OAAO;UACPE,MAAM;UACN0C,UAAU,EAAEd,KAAK,GAAG;QACtB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAOtD,KAAK;EACd,CAAC;EAED,MAAMqE,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACjF,WAAW,CAAC2D,IAAI,CAAC,CAAC,EAAE;MACvB1B,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACF;IAEA9B,cAAc,CAAC,IAAI,CAAC;IACpBI,WAAW,CAAC,IAAI,CAAC;IACjBE,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI;MACF;MACA,MAAMyE,UAAU,GAAGC,WAAW,CAACb,MAAM;MACrC,IAAIc,SAAS,GAAG,CAAC;MAEjB,MAAMC,gBAAgB,GAAGC,WAAW,CAAC,MAAM;QACzCF,SAAS,IAAIG,IAAI,CAACC,IAAI,CAACN,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC;QACzC,IAAIE,SAAS,IAAIF,UAAU,EAAE;UAC3BE,SAAS,GAAGF,UAAU;QACxB;QAEA3E,WAAW,CAAC;UACV6E,SAAS;UACTK,KAAK,EAAEP,UAAU;UACjBQ,KAAK,EAAEH,IAAI,CAACI,KAAK,CAACP,SAAS,GAAG,GAAG,CAAC;UAAE;UACpCQ,OAAO,EAAEL,IAAI,CAACI,KAAK,CAACP,SAAS,GAAG,GAAG,CAAC;UAAE;UACtCS,MAAM,EAAE,CAAC;UACTC,UAAU,EAAEP,IAAI,CAACQ,KAAK,CAAEX,SAAS,GAAGF,UAAU,GAAI,GAAG;QACvD,CAAC,CAAC;QAEF,IAAIE,SAAS,IAAIF,UAAU,EAAE;UAC3Bc,aAAa,CAACX,gBAAgB,CAAC;QACjC;MACF,CAAC,EAAE,GAAG,CAAC;;MAEP;MACA,MAAMjE,QAAQ,GAAG,MAAM3B,KAAK,CAAC0C,IAAI,CAAC,mBAAmB,EAAE;QAAEnC;MAAY,CAAC,CAAC;MAEvEgG,aAAa,CAACX,gBAAgB,CAAC;MAC/B5E,eAAe,CAACW,QAAQ,CAACE,IAAI,CAAC;MAC9BnB,cAAc,CAAC,KAAK,CAAC;IAEvB,CAAC,CAAC,OAAOoB,KAAK,EAAE;MAAA,IAAA0E,eAAA,EAAAC,oBAAA;MACd1E,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9Cd,eAAe,CAAC;QAAEc,KAAK,EAAE,EAAA0E,eAAA,GAAA1E,KAAK,CAACH,QAAQ,cAAA6E,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgB3E,IAAI,cAAA4E,oBAAA,uBAApBA,oBAAA,CAAsB3E,KAAK,KAAI;MAAyB,CAAC,CAAC;MACnFpB,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAMgG,SAAS,GAAGA,CAAA,KAAM;IACtBlG,cAAc,CAAC,EAAE,CAAC;IAClBM,WAAW,CAAC,IAAI,CAAC;IACjBE,eAAe,CAAC,IAAI,CAAC;IACrBE,cAAc,CAAC,KAAK,CAAC;IACrB,IAAIO,YAAY,CAACkF,OAAO,EAAE;MACxBlF,YAAY,CAACkF,OAAO,CAAC3C,KAAK,GAAG,EAAE;IACjC;EACF,CAAC;EAED,MAAM4C,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,cAAc,GAAG,+FAA+F;IACtH,MAAMC,aAAa,GAAG5E,MAAM,CAACC,OAAO,CAAC0E,cAAc,CAAC;IAEpD,IAAIC,aAAa,EAAE;MACjB,MAAMC,YAAY,GAAG7E,MAAM,CAACC,OAAO,CAAC,sFAAsF,CAAC;MAC3H,IAAI4E,YAAY,EAAE;QAChB,IAAI;UACF,MAAMpF,QAAQ,GAAG,MAAM3B,KAAK,CAAC0C,IAAI,CAAC,sBAAsB,EAAE;YAAEP,OAAO,EAAE;UAAK,CAAC,CAAC;UAC5EK,KAAK,CAAC,wBAAwBb,QAAQ,CAACE,IAAI,CAACmF,YAAY,QAAQ,CAAC;UACjE;UACA9E,MAAM,CAAC+E,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC,OAAOpF,KAAK,EAAE;UAAA,IAAAqF,gBAAA,EAAAC,qBAAA;UACdrF,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjDU,KAAK,CAAC,8BAA8B,IAAI,EAAA2E,gBAAA,GAAArF,KAAK,CAACH,QAAQ,cAAAwF,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtF,IAAI,cAAAuF,qBAAA,uBAApBA,qBAAA,CAAsBtF,KAAK,KAAIA,KAAK,CAACuF,OAAO,CAAC,CAAC;QACxF;MACF;IACF;EACF,CAAC;EAED,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,MAAMT,cAAc,GAAG,oHAAoH;IAC3I,MAAMC,aAAa,GAAG5E,MAAM,CAACC,OAAO,CAAC0E,cAAc,CAAC;IAEpD,IAAIC,aAAa,EAAE;MACjBlG,eAAe,CAAC,IAAI,CAAC;MACrB,IAAI;QACF,MAAMe,QAAQ,GAAG,MAAM3B,KAAK,CAAC0C,IAAI,CAAC,+BAA+B,CAAC;QAClE,MAAM6E,OAAO,GAAG5F,QAAQ,CAACE,IAAI,CAAC0F,OAAO;QACrC/E,KAAK,CAAC,oEAAoE+E,OAAO,CAAC5B,SAAS,sBAAsB4B,OAAO,CAACC,OAAO,qBAAqBD,OAAO,CAACnB,MAAM,kHAAkH,CAAC;QACtR;QACAlE,MAAM,CAAC+E,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOpF,KAAK,EAAE;QAAA,IAAA2F,gBAAA,EAAAC,qBAAA;QACd3F,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDU,KAAK,CAAC,kCAAkC,IAAI,EAAAiF,gBAAA,GAAA3F,KAAK,CAACH,QAAQ,cAAA8F,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5F,IAAI,cAAA6F,qBAAA,uBAApBA,qBAAA,CAAsB5F,KAAK,KAAIA,KAAK,CAACuF,OAAO,CAAC,CAAC;MAC5F,CAAC,SAAS;QACRzG,eAAe,CAAC,KAAK,CAAC;MACxB;IACF;EACF,CAAC;EAED,MAAM8E,WAAW,GAAGvB,UAAU,CAAC5D,WAAW,CAAC;;EAE3C;EACA,MAAMoH,aAAa,GAAGxG,KAAK,CAACkB,MAAM,CAACC,IAAI,IACrCA,IAAI,CAACK,OAAO,CAACmC,WAAW,CAAC,CAAC,CAACH,QAAQ,CAACpD,UAAU,CAACuD,WAAW,CAAC,CAAC,CAAC,IAC7DxC,IAAI,CAACO,MAAM,CAAC8B,QAAQ,CAACpD,UAAU,CACjC,CAAC;EAED,oBACErB,OAAA;IAAK0H,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAE3B3H,OAAA;MAAK0H,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB3H,OAAA;QACE0H,SAAS,EAAE,WAAWvG,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC/DyG,OAAO,EAAEA,CAAA,KAAMxG,YAAY,CAAC,QAAQ,CAAE;QAAAuG,QAAA,EACvC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OAAQ,CAAC,eACT/H,OAAA;QACE0H,SAAS,EAAE,WAAWvG,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC/DyG,OAAO,EAAEA,CAAA,KAAMxG,YAAY,CAAC,QAAQ,CAAE;QAAAuG,QAAA,EACvC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAF,QAAA,EAAAC,YAAA;MAAAzC,UAAA;MAAA0C,YAAA;IAAA,OACN,CAAC,EAGL5G,SAAS,KAAK,QAAQ,iBACrBnB,OAAA,CAAAE,SAAA;MAAAyH,QAAA,gBACE3H,OAAA;QAAK0H,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClC3H,OAAA;UAAA2H,QAAA,EAAI;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,eAC1B/H,OAAA;UAAA2H,QAAA,EAAG;QAAyF;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAG,CAAC,eAChG/H,OAAA;UAAI0H,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACzB3H,OAAA;YAAA2H,QAAA,gBAAI3H,OAAA;cAAA2H,QAAA,EAAQ;YAAc;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,iDAAiB;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACzD/H,OAAA;YAAA2H,QAAA,gBAAI3H,OAAA;cAAA2H,QAAA,EAAQ;YAAa;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,gDAAiB;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACxD/H,OAAA;YAAA2H,QAAA,gBAAI3H,OAAA;cAAA2H,QAAA,EAAQ;YAAW;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,uIAAkD;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACvF/H,OAAA;YAAA2H,QAAA,gBAAI3H,OAAA;cAAA2H,QAAA,EAAQ;YAAY;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,gGAAiE;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACvG/H,OAAA;YAAA2H,QAAA,gBAAI3H,OAAA;cAAA2H,QAAA,EAAQ;YAAgB;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,0EAAsE;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAC9G,CAAC;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACF,CAAC,eAEV/H,OAAA;QAAK0H,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B3H,OAAA;UAAK0H,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAClC3H,OAAA;YAAA2H,QAAA,EAAI;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACzB/H,OAAA;YACEgI,IAAI,EAAC,MAAM;YACXC,MAAM,EAAC,WAAW;YAClBC,QAAQ,EAAEhF,gBAAiB;YAC3BiF,GAAG,EAAE5G,YAAa;YAClBmG,SAAS,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACvB,CAAC,eACF/H,OAAA;YAAG0H,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAC;UAA8C;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACxE,CAAC,eAEN/H,OAAA;UAAK0H,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBACjC3H,OAAA;YAAA2H,QAAA,EAAI;UAAsB;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eAC/B/H,OAAA;YACE8D,KAAK,EAAEzD,WAAY;YACnB6H,QAAQ,EAAErE,gBAAiB;YAC3BuE,WAAW,EAAC,sPAAwI;YACpJC,IAAI,EAAE,EAAG;YACTX,SAAS,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACC,CAAC,eAEN/H,OAAA;UAAK0H,SAAS,EAAC,iBAAiB;UAAAC,QAAA,eAC9B3H,OAAA;YACEgI,IAAI,EAAC,QAAQ;YACbN,SAAS,EAAC,mBAAmB;YAC7BE,OAAO,EAAE7D,YAAa;YACtBuE,QAAQ,EAAE,CAACjI,WAAW,CAAC2D,IAAI,CAAC,CAAE;YAAA2D,QAAA,GAC/B,iBACgB,EAACnC,WAAW,CAACb,MAAM,EAAC,SACrC;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAQ;QAAC;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACN,CAAC,EAELhH,WAAW,IAAIyE,WAAW,CAACb,MAAM,GAAG,CAAC,iBACpC3E,OAAA;UAAK0H,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B3H,OAAA;YAAA2H,QAAA,GAAI,WAAS,EAACnC,WAAW,CAACb,MAAM,EAAC,SAAO;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eAC7C/H,OAAA;YAAK0H,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B3H,OAAA;cAAA2H,QAAA,gBACE3H,OAAA;gBAAA2H,QAAA,eACE3H,OAAA;kBAAA2H,QAAA,gBACE3H,OAAA;oBAAA2H,QAAA,EAAI;kBAAC;oBAAAE,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAI,CAAC,eACV/H,OAAA;oBAAA2H,QAAA,EAAI;kBAAO;oBAAAE,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAI,CAAC,eAChB/H,OAAA;oBAAA2H,QAAA,EAAI;kBAAM;oBAAAE,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAI,CAAC;gBAAA;kBAAAF,QAAA,EAAAC,YAAA;kBAAAzC,UAAA;kBAAA0C,YAAA;gBAAA,OACb;cAAC;gBAAAF,QAAA,EAAAC,YAAA;gBAAAzC,UAAA;gBAAA0C,YAAA;cAAA,OACA,CAAC,eACR/H,OAAA;gBAAA2H,QAAA,EACGnC,WAAW,CAACX,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC7B,GAAG,CAAC,CAACZ,IAAI,EAAEmC,KAAK,kBACxCvE,OAAA;kBAAA2H,QAAA,gBACE3H,OAAA;oBAAA2H,QAAA,EAAKvF,IAAI,CAACiD;kBAAU;oBAAAwC,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAK,CAAC,eAC1B/H,OAAA;oBAAA2H,QAAA,EAAKvF,IAAI,CAACK;kBAAO;oBAAAoF,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAK,CAAC,eACvB/H,OAAA;oBAAIuI,GAAG,EAAC,KAAK;oBAAAZ,QAAA,EAAEvF,IAAI,CAACO;kBAAM;oBAAAkF,QAAA,EAAAC,YAAA;oBAAAzC,UAAA;oBAAA0C,YAAA;kBAAA,OAAK,CAAC;gBAAA,GAHzBxD,KAAK;kBAAAsD,QAAA,EAAAC,YAAA;kBAAAzC,UAAA;kBAAA0C,YAAA;gBAAA,OAIV,CACL;cAAC;gBAAAF,QAAA,EAAAC,YAAA;gBAAAzC,UAAA;gBAAA0C,YAAA;cAAA,OACG,CAAC;YAAA;cAAAF,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OACH,CAAC,EACPvC,WAAW,CAACb,MAAM,GAAG,EAAE,iBACtB3E,OAAA;cAAG0H,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,iCAA+B,EAACnC,WAAW,CAACb,MAAM;YAAA;cAAAkD,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAI,CACnF;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACE,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACH,CACN,eAED/H,OAAA;UAAK0H,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B3H,OAAA;YACEgI,IAAI,EAAC,QAAQ;YACbN,SAAS,EAAC,iBAAiB;YAC3BE,OAAO,EAAEtC,WAAY;YACrBgD,QAAQ,EAAE/H,WAAW,IAAI,CAACF,WAAW,CAAC2D,IAAI,CAAC,CAAE;YAAA2D,QAAA,EAE5CpH,WAAW,GAAG,cAAc,GAAG,UAAUiF,WAAW,CAACb,MAAM;UAAQ;YAAAkD,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAC9D,CAAC,eAET/H,OAAA;YACEgI,IAAI,EAAC,QAAQ;YACbN,SAAS,EAAC,mBAAmB;YAC7BE,OAAO,EAAEpB,SAAU;YACnB8B,QAAQ,EAAE/H,WAAY;YAAAoH,QAAA,EACvB;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAQ,CAAC,eAET/H,OAAA;YACEgI,IAAI,EAAC,QAAQ;YACbN,SAAS,EAAC,gBAAgB;YAC1BE,OAAO,EAAElB,eAAgB;YACzB4B,QAAQ,EAAE/H,WAAY;YACtBiI,KAAK,EAAC,6CAA6C;YAAAb,QAAA,EACpD;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAQ,CAAC,eAET/H,OAAA;YACEgI,IAAI,EAAC,QAAQ;YACbN,SAAS,EAAC,iBAAiB;YAC3BE,OAAO,EAAER,uBAAwB;YACjCkB,QAAQ,EAAE7H,YAAY,IAAIF,WAAY;YACtCiI,KAAK,EAAC,+CAA+C;YAAAb,QAAA,EAEpDlH,YAAY,GAAG,eAAe,GAAG;UAAuB;YAAAoH,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACnD,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACN,CAAC;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACH,CAAC,EAELxH,WAAW,IAAII,QAAQ,iBACtBX,OAAA;QAAK0H,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B3H,OAAA;UAAA2H,QAAA,EAAI;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,eACxB/H,OAAA;UAAK0H,SAAS,EAAC,cAAc;UAAAC,QAAA,eAC3B3H,OAAA;YACE0H,SAAS,EAAC,eAAe;YACzBe,KAAK,EAAE;cAAEC,KAAK,EAAE,GAAG/H,QAAQ,CAACwF,UAAU;YAAI;UAAE;YAAA0B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACxC;QAAC;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACJ,CAAC,eACN/H,OAAA;UAAK0H,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B3H,OAAA;YAAA2H,QAAA,GAAG,aAAW,EAAChH,QAAQ,CAAC8E,SAAS,EAAC,KAAG,EAAC9E,QAAQ,CAACmF,KAAK,EAAC,IAAE,EAACnF,QAAQ,CAACwF,UAAU,EAAC,IAAE;UAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAG,CAAC,eAClF/H,OAAA;YAAA2H,QAAA,GAAG,SAAO,EAAChH,QAAQ,CAACoF,KAAK,EAAC,cAAY,EAACpF,QAAQ,CAACsF,OAAO,EAAC,aAAW,EAACtF,QAAQ,CAACuF,MAAM;UAAA;YAAA2B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACxF/H,OAAA;YAAA2H,QAAA,GAAG,4BAA0B,EAAC/B,IAAI,CAACC,IAAI,CAAC,CAAClF,QAAQ,CAACmF,KAAK,GAAGnF,QAAQ,CAAC8E,SAAS,IAAI,EAAE,CAAC,EAAC,UAAQ;UAAA;YAAAoC,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAC7F,CAAC;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACH,CACN,EAEAlH,YAAY,iBACXb,OAAA;QAAK0H,SAAS,EAAE,iBAAiB7G,YAAY,CAACe,KAAK,GAAG,OAAO,GAAG,SAAS,EAAG;QAAA+F,QAAA,gBAC1E3H,OAAA;UAAA2H,QAAA,EAAI;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,EACvBlH,YAAY,CAACe,KAAK,gBACjB5B,OAAA;UAAG0H,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAE9G,YAAY,CAACe;QAAK;UAAAiG,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,gBAErD/H,OAAA;UAAK0H,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3H,OAAA;YAAA2H,QAAA,gBAAG3H,OAAA;cAAA2H,QAAA,EAAQ;YAAgB;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAClH,YAAY,CAACiF,KAAK;UAAA;YAAA+B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eAC7D/H,OAAA;YAAA2H,QAAA,gBAAG3H,OAAA;cAAA2H,QAAA,EAAQ;YAAmB;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAClH,YAAY,CAACkF,KAAK;UAAA;YAAA8B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eAChE/H,OAAA;YAAA2H,QAAA,gBAAG3H,OAAA;cAAA2H,QAAA,EAAQ;YAAwB;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAClH,YAAY,CAACoF,OAAO;UAAA;YAAA4B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACvE/H,OAAA;YAAA2H,QAAA,gBAAG3H,OAAA;cAAA2H,QAAA,EAAQ;YAAO;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,KAAC,EAAClH,YAAY,CAACqF,MAAM;UAAA;YAAA2B,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAClD,CACN;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACE,CACN,eAEG/H,OAAA;QAAK0H,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B3H,OAAA;UAAA2H,QAAA,EAAI;QAAoB;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,eAC7B/H,OAAA;UAAA2H,QAAA,gBACE3H,OAAA;YAAA2H,QAAA,EAAI;UAA4C;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACrD/H,OAAA;YAAA2H,QAAA,EAAI;UAA4C;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACrD/H,OAAA;YAAA2H,QAAA,EAAI;UAA6C;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACtD/H,OAAA;YAAA2H,QAAA,EAAI;UAA+D;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC,eACxE/H,OAAA;YAAA2H,QAAA,EAAI;UAAuB;YAAAE,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAC9B,CAAC;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACF,CAAC;IAAA,eACN,CACH,EAGA5G,SAAS,KAAK,QAAQ,iBACrBnB,OAAA;MAAK0H,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B3H,OAAA;QAAK0H,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC3H,OAAA;UAAA2H,QAAA,EAAI;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAI,CAAC,eACxB/H,OAAA;UAAA2H,QAAA,EAAG;QAAoE;UAAAE,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAAG,CAAC,eAE3E/H,OAAA;UAAK0H,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B3H,OAAA;YACEgI,IAAI,EAAC,MAAM;YACXI,WAAW,EAAC,iBAAiB;YAC7BtE,KAAK,EAAEzC,UAAW;YAClB6G,QAAQ,EAAGxE,CAAC,IAAKpC,aAAa,CAACoC,CAAC,CAACL,MAAM,CAACS,KAAK,CAAE;YAC/C4D,SAAS,EAAC;UAAc;YAAAG,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACzB,CAAC,eACF/H,OAAA;YAAM0H,SAAS,EAAC,YAAY;YAAAC,QAAA,GAAEF,aAAa,CAAC9C,MAAM,EAAC,cAAY;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OACnE,CAAC;MAAA;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACH,CAAC,eAEN/H,OAAA;QAAK0H,SAAS,EAAC,YAAY;QAAAC,QAAA,EACxBF,aAAa,CAAC9C,MAAM,KAAK,CAAC,gBACzB3E,OAAA;UAAK0H,SAAS,EAAC,UAAU;UAAAC,QAAA,eACvB3H,OAAA;YAAA2H,QAAA,GAAG,kBAAgB,EAACtG,UAAU,GAAG,8BAA8B,GAAG,0BAA0B;UAAA;YAAAwG,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OAAI;QAAC;UAAAF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAC9F,CAAC,GAENN,aAAa,CAACzE,GAAG,CAACZ,IAAI,iBACpBpC,OAAA;UAAmB0H,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC5C3H,OAAA;YAAK0H,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxB3H,OAAA;cAAI0H,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAEvF,IAAI,CAACK;YAAO;cAAAoF,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAK,CAAC,eAC3C/H,OAAA;cAAG0H,SAAS,EAAC,QAAQ;cAAAC,QAAA,EAAEvF,IAAI,CAACO;YAAM;cAAAkF,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAI,CAAC,eACvC/H,OAAA;cAAK0H,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzB3H,OAAA;gBAAM0H,SAAS,EAAC,MAAM;gBAAAC,QAAA,GAAC,SAAO,EAACvF,IAAI,CAACuG,SAAS,EAAC,IAAE;cAAA;gBAAAd,QAAA,EAAAC,YAAA;gBAAAzC,UAAA;gBAAA0C,YAAA;cAAA,OAAM,CAAC,eACvD/H,OAAA;gBAAM0H,SAAS,EAAC,MAAM;gBAAAC,QAAA,GAAC,cAAY,EAACvF,IAAI,CAACS,UAAU,EAAC,IAAE;cAAA;gBAAAgF,QAAA,EAAAC,YAAA;gBAAAzC,UAAA;gBAAA0C,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAF,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAC1D,CAAC;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACH,CAAC,eACN/H,OAAA;YAAK0H,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3B3H,OAAA;cACE0H,SAAS,EAAC,mBAAmB;cAC7BE,OAAO,EAAEA,CAAA,KAAMrF,kBAAkB,CAACH,IAAI,CAAE;cACxCoG,KAAK,EAAC,qBAAqB;cAAAb,QAAA,EAC5B;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC,eACT/H,OAAA;cACE0H,SAAS,EAAC,gBAAgB;cAC1BE,OAAO,EAAEA,CAAA,KAAM9F,gBAAgB,CAACM,IAAI,CAACC,EAAE,CAAE;cACzCmG,KAAK,EAAC,aAAa;cAAAb,QAAA,EACpB;YAED;cAAAE,QAAA,EAAAC,YAAA;cAAAzC,UAAA;cAAA0C,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAF,QAAA,EAAAC,YAAA;YAAAzC,UAAA;YAAA0C,YAAA;UAAA,OACN,CAAC;QAAA,GAxBE3F,IAAI,CAACC,EAAE;UAAAwF,QAAA,EAAAC,YAAA;UAAAzC,UAAA;UAAA0C,YAAA;QAAA,OAyBZ,CACN;MACF;QAAAF,QAAA,EAAAC,YAAA;QAAAzC,UAAA;QAAA0C,YAAA;MAAA,OACE,CAAC;IAAA;MAAAF,QAAA,EAAAC,YAAA;MAAAzC,UAAA;MAAA0C,YAAA;IAAA,OACH,CACN;EAAA;IAAAF,QAAA,EAAAC,YAAA;IAAAzC,UAAA;IAAA0C,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3H,EAAA,CA3fID,WAAW;AAAAyI,EAAA,GAAXzI,WAAW;AA6fjB,eAAeA,WAAW;AAAC,IAAAyI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}