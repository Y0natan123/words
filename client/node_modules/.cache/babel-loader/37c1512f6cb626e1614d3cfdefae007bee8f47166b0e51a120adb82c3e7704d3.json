{"ast":null,"code":"import React from'react';import'./Statistics.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Statistics=_ref=>{var _stats$byUserLevel2,_stats$byUserLevel3,_stats$byUserLevel4;let{stats,words,languagePair}=_ref;if(!stats){return/*#__PURE__*/_jsx(\"div\",{className:\"statistics\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading statistics...\"})});}const calculateProgress=()=>{var _stats$byUserLevel;const total=stats.totalWords;if(total===0)return 0;// Handle both old and new data formats\nconst mastered=stats.masteredWords||((_stats$byUserLevel=stats.byUserLevel)===null||_stats$byUserLevel===void 0?void 0:_stats$byUserLevel[5])||0;return Math.round(mastered/total*100);};const getLevelDescription=level=>{const descriptions={0:'Not Started',1:'Beginner',2:'Elementary',3:'Intermediate',4:'Advanced',5:'Mastered'};return descriptions[level]||'Unknown';};const getDifficultyDescription=difficulty=>{const descriptions={1:'Very Basic',2:'Basic',3:'Intermediate',4:'Advanced',5:'Very Advanced'};return descriptions[difficulty]||'Unknown';};const renderProgressBar=(current,total,label)=>{const percentage=total===0?0:Math.round(current/total*100);return/*#__PURE__*/_jsxs(\"div\",{className:\"progress-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"progress-label\",children:[/*#__PURE__*/_jsx(\"span\",{children:label}),/*#__PURE__*/_jsxs(\"span\",{children:[current,\" / \",total]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${percentage}%`}})}),/*#__PURE__*/_jsxs(\"span\",{className:\"progress-percentage\",children:[percentage,\"%\"]})]});};const renderLevelDistribution=()=>{// Handle new data format\nif(stats.byUserLevel){return Object.entries(stats.byUserLevel).map(_ref2=>{let[level,count]=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level-name\",children:[\"Level \",level]}),/*#__PURE__*/_jsx(\"span\",{className:\"level-count\",children:count})]}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"distribution-fill\",style:{width:`${stats.totalWords===0?0:count/stats.totalWords*100}%`,backgroundColor:getLevelColor(parseInt(level))}})}),/*#__PURE__*/_jsx(\"span\",{className:\"level-description\",children:getLevelDescription(parseInt(level))})]},level);});}// New data format - create distribution from available stats\nconst distribution=[{level:0,count:stats.newWords||0,description:'Not Started'},{level:1,count:Math.round((stats.learningWords||0)*0.25),description:'Beginner'},{level:2,count:Math.round((stats.learningWords||0)*0.25),description:'Elementary'},{level:3,count:Math.round((stats.learningWords||0)*0.25),description:'Intermediate'},{level:4,count:Math.round((stats.learningWords||0)*0.25),description:'Advanced'},{level:5,count:stats.masteredWords||0,description:'Mastered'}];return distribution.filter(item=>item.count>0).map(_ref3=>{let{level,count,description}=_ref3;return/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level-name\",children:[\"Level \",level]}),/*#__PURE__*/_jsx(\"span\",{className:\"level-count\",children:count})]}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"distribution-fill\",style:{width:`${stats.totalWords===0?0:count/stats.totalWords*100}%`,backgroundColor:getLevelColor(level)}})}),/*#__PURE__*/_jsx(\"span\",{className:\"level-description\",children:description})]},level);});};const renderDifficultyDistribution=()=>{// Handle old data format\nif(stats.byDifficulty){return Object.entries(stats.byDifficulty).map(_ref4=>{let[difficulty,count]=_ref4;return/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level-name\",children:[\"Difficulty \",difficulty]}),/*#__PURE__*/_jsx(\"span\",{className:\"level-count\",children:count})]}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"distribution-fill\",style:{width:`${stats.totalWords===0?0:count/stats.totalWords*100}%`,backgroundColor:getDifficultyColor(parseInt(difficulty))}})}),/*#__PURE__*/_jsx(\"span\",{className:\"level-description\",children:getDifficultyDescription(parseInt(difficulty))})]},difficulty);});}// New data format - calculate from words array\nif(!words||words.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"no-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No difficulty data available\"})});}const difficultyCount=words.reduce((acc,word)=>{const diff=word.difficulty||1;acc[diff]=(acc[diff]||0)+1;return acc;},{});return Object.entries(difficultyCount).map(_ref5=>{let[difficulty,count]=_ref5;return/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"distribution-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level-name\",children:[\"Difficulty \",difficulty]}),/*#__PURE__*/_jsx(\"span\",{className:\"level-count\",children:count})]}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"distribution-fill\",style:{width:`${stats.totalWords===0?0:count/stats.totalWords*100}%`,backgroundColor:getDifficultyColor(parseInt(difficulty))}})}),/*#__PURE__*/_jsx(\"span\",{className:\"level-description\",children:getDifficultyDescription(parseInt(difficulty))})]},difficulty);});};const getLevelColor=level=>{const colors=['#dc3545','#fd7e14','#ffc107','#20c997','#198754','#0d6efd'];return colors[Math.min(level,5)];};const getDifficultyColor=difficulty=>{const colors=['','#28a745','#ffc107','#fd7e14','#dc3545','#6f42c1'];return colors[difficulty];};const getRecentWords=()=>{if(!words||words.length===0)return[];return words.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt)).slice(0,5);};const getTopWords=()=>{if(!words||words.length===0)return[];return words.filter(word=>(word.userLevel||0)>0).sort((a,b)=>(b.userLevel||0)-(a.userLevel||0)).slice(0,5);};return/*#__PURE__*/_jsxs(\"div\",{className:\"statistics\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"statistics-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Learning Statistics\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Track your progress and see your learning patterns\"})]}),languagePair&&/*#__PURE__*/_jsxs(\"div\",{className:\"language-pair-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Current Language Pair\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pair-display\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"source-language\",children:languagePair.sourceLanguage}),/*#__PURE__*/_jsx(\"span\",{className:\"arrow\",children:\"\\u2192\"}),/*#__PURE__*/_jsx(\"span\",{className:\"target-language\",children:languagePair.targetLanguage})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-overview\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"overview-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Total Words\"}),/*#__PURE__*/_jsx(\"div\",{className:\"overview-number\",children:stats.totalWords||0})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"overview-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Mastered\"}),/*#__PURE__*/_jsx(\"div\",{className:\"overview-number\",children:stats.masteredWords||((_stats$byUserLevel2=stats.byUserLevel)===null||_stats$byUserLevel2===void 0?void 0:_stats$byUserLevel2[5])||0})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"overview-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Learning\"}),/*#__PURE__*/_jsx(\"div\",{className:\"overview-number\",children:stats.learningWords||(stats.byUserLevel?Object.entries(stats.byUserLevel).filter(_ref6=>{let[level]=_ref6;return level>0&&level<5;}).reduce((sum,_ref7)=>{let[,count]=_ref7;return sum+count;},0):0)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"overview-card\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Progress\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"overview-number\",children:[calculateProgress(),\"%\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-sections\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Learning Progress\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress-container\",children:[renderProgressBar(stats.masteredWords||((_stats$byUserLevel3=stats.byUserLevel)===null||_stats$byUserLevel3===void 0?void 0:_stats$byUserLevel3[5])||0,stats.totalWords,'Mastered (Level 5)'),renderProgressBar(stats.learningWords||(stats.byUserLevel?Object.entries(stats.byUserLevel).filter(_ref8=>{let[level]=_ref8;return level>0&&level<5;}).reduce((sum,_ref9)=>{let[,count]=_ref9;return sum+count;},0):0),stats.totalWords,'Learning (Level 1-4)'),renderProgressBar(stats.newWords||((_stats$byUserLevel4=stats.byUserLevel)===null||_stats$byUserLevel4===void 0?void 0:_stats$byUserLevel4[0])||0,stats.totalWords,'Not Started (Level 0)')]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Level Distribution\"}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-container\",children:renderLevelDistribution()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Difficulty Distribution\"}),/*#__PURE__*/_jsx(\"div\",{className:\"distribution-container\",children:renderDifficultyDistribution()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Recent Words Added\"}),/*#__PURE__*/_jsx(\"div\",{className:\"words-list\",children:getRecentWords().length>0?getRecentWords().map(word=>/*#__PURE__*/_jsxs(\"div\",{className:\"word-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"word-text\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"source\",children:word.sourceWord||word.english}),/*#__PURE__*/_jsx(\"span\",{className:\"target\",children:word.targetWord||word.hebrew})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-meta\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level\",children:[\"Level \",word.userLevel||0]}),/*#__PURE__*/_jsxs(\"span\",{className:\"difficulty\",children:[\"Diff \",word.difficulty||1]})]})]},word.id)):/*#__PURE__*/_jsx(\"div\",{className:\"no-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No words added yet\"})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Top Performing Words\"}),/*#__PURE__*/_jsx(\"div\",{className:\"words-list\",children:getTopWords().length>0?getTopWords().map(word=>/*#__PURE__*/_jsxs(\"div\",{className:\"word-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"word-text\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"source\",children:word.sourceWord||word.english}),/*#__PURE__*/_jsx(\"span\",{className:\"target\",children:word.targetWord||word.hebrew})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"word-meta\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"level\",children:[\"Level \",word.userLevel||0]}),/*#__PURE__*/_jsxs(\"span\",{className:\"difficulty\",children:[\"Diff \",word.difficulty||1]})]})]},word.id)):/*#__PURE__*/_jsx(\"div\",{className:\"no-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No words learned yet\"})})})]})]})]});};export default Statistics;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","Statistics","_ref","_stats$byUserLevel2","_stats$byUserLevel3","_stats$byUserLevel4","stats","words","languagePair","className","children","calculateProgress","_stats$byUserLevel","total","totalWords","mastered","masteredWords","byUserLevel","Math","round","getLevelDescription","level","descriptions","getDifficultyDescription","difficulty","renderProgressBar","current","label","percentage","style","width","renderLevelDistribution","Object","entries","map","_ref2","count","backgroundColor","getLevelColor","parseInt","distribution","newWords","description","learningWords","filter","item","_ref3","renderDifficultyDistribution","byDifficulty","_ref4","getDifficultyColor","length","difficultyCount","reduce","acc","word","diff","_ref5","colors","min","getRecentWords","sort","a","b","Date","createdAt","slice","getTopWords","userLevel","sourceLanguage","targetLanguage","_ref6","sum","_ref7","_ref8","_ref9","sourceWord","english","targetWord","hebrew","id"],"sources":["C:/Users/Magshimim/Documents/wordGame/Y0natan123.github.io/client/src/components/Statistics.js"],"sourcesContent":["import React from 'react';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ({ stats, words, languagePair }) => {\r\n  if (!stats) {\r\n    return (\r\n      <div className=\"statistics\">\r\n        <div className=\"loading\">Loading statistics...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const calculateProgress = () => {\r\n    const total = stats.totalWords;\r\n    if (total === 0) return 0;\r\n    \r\n    // Handle both old and new data formats\r\n    const mastered = stats.masteredWords || stats.byUserLevel?.[5] || 0;\r\n    return Math.round((mastered / total) * 100);\r\n  };\r\n\r\n  const getLevelDescription = (level) => {\r\n    const descriptions = {\r\n      0: 'Not Started',\r\n      1: 'Beginner',\r\n      2: 'Elementary',\r\n      3: 'Intermediate',\r\n      4: 'Advanced',\r\n      5: 'Mastered'\r\n    };\r\n    return descriptions[level] || 'Unknown';\r\n  };\r\n\r\n  const getDifficultyDescription = (difficulty) => {\r\n    const descriptions = {\r\n      1: 'Very Basic',\r\n      2: 'Basic',\r\n      3: 'Intermediate',\r\n      4: 'Advanced',\r\n      5: 'Very Advanced'\r\n    };\r\n    return descriptions[difficulty] || 'Unknown';\r\n  };\r\n\r\n  const renderProgressBar = (current, total, label) => {\r\n    const percentage = total === 0 ? 0 : Math.round((current / total) * 100);\r\n    return (\r\n      <div className=\"progress-item\">\r\n        <div className=\"progress-label\">\r\n          <span>{label}</span>\r\n          <span>{current} / {total}</span>\r\n        </div>\r\n        <div className=\"progress-bar\">\r\n          <div \r\n            className=\"progress-fill\" \r\n            style={{ width: `${percentage}%` }}\r\n          ></div>\r\n        </div>\r\n        <span className=\"progress-percentage\">{percentage}%</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderLevelDistribution = () => {\r\n    // Handle new data format\r\n    if (stats.byUserLevel) {\r\n      return Object.entries(stats.byUserLevel).map(([level, count]) => (\r\n        <div key={level} className=\"distribution-item\">\r\n          <div className=\"distribution-header\">\r\n            <span className=\"level-name\">Level {level}</span>\r\n            <span className=\"level-count\">{count}</span>\r\n          </div>\r\n          <div className=\"distribution-bar\">\r\n            <div \r\n              className=\"distribution-fill\"\r\n              style={{ \r\n                width: `${stats.totalWords === 0 ? 0 : (count / stats.totalWords) * 100}%`,\r\n                backgroundColor: getLevelColor(parseInt(level))\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <span className=\"level-description\">{getLevelDescription(parseInt(level))}</span>\r\n        </div>\r\n      ));\r\n    }\r\n\r\n    // New data format - create distribution from available stats\r\n    const distribution = [\r\n      { level: 0, count: stats.newWords || 0, description: 'Not Started' },\r\n      { level: 1, count: Math.round((stats.learningWords || 0) * 0.25), description: 'Beginner' },\r\n      { level: 2, count: Math.round((stats.learningWords || 0) * 0.25), description: 'Elementary' },\r\n      { level: 3, count: Math.round((stats.learningWords || 0) * 0.25), description: 'Intermediate' },\r\n      { level: 4, count: Math.round((stats.learningWords || 0) * 0.25), description: 'Advanced' },\r\n      { level: 5, count: stats.masteredWords || 0, description: 'Mastered' }\r\n    ];\r\n\r\n    return distribution.filter(item => item.count > 0).map(({ level, count, description }) => (\r\n      <div key={level} className=\"distribution-item\">\r\n        <div className=\"distribution-header\">\r\n          <span className=\"level-name\">Level {level}</span>\r\n          <span className=\"level-count\">{count}</span>\r\n        </div>\r\n        <div className=\"distribution-bar\">\r\n          <div \r\n            className=\"distribution-fill\"\r\n            style={{ \r\n              width: `${stats.totalWords === 0 ? 0 : (count / stats.totalWords) * 100}%`,\r\n              backgroundColor: getLevelColor(level)\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <span className=\"level-description\">{description}</span>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const renderDifficultyDistribution = () => {\r\n    // Handle old data format\r\n    if (stats.byDifficulty) {\r\n      return Object.entries(stats.byDifficulty).map(([difficulty, count]) => (\r\n        <div key={difficulty} className=\"distribution-item\">\r\n          <div className=\"distribution-header\">\r\n            <span className=\"level-name\">Difficulty {difficulty}</span>\r\n            <span className=\"level-count\">{count}</span>\r\n          </div>\r\n          <div className=\"distribution-bar\">\r\n            <div \r\n              className=\"distribution-fill\"\r\n              style={{ \r\n                width: `${stats.totalWords === 0 ? 0 : (count / stats.totalWords) * 100}%`,\r\n                backgroundColor: getDifficultyColor(parseInt(difficulty))\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <span className=\"level-description\">{getDifficultyDescription(parseInt(difficulty))}</span>\r\n        </div>\r\n      ));\r\n    }\r\n\r\n    // New data format - calculate from words array\r\n    if (!words || words.length === 0) {\r\n      return (\r\n        <div className=\"no-data\">\r\n          <p>No difficulty data available</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const difficultyCount = words.reduce((acc, word) => {\r\n      const diff = word.difficulty || 1;\r\n      acc[diff] = (acc[diff] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(difficultyCount).map(([difficulty, count]) => (\r\n      <div key={difficulty} className=\"distribution-item\">\r\n        <div className=\"distribution-header\">\r\n          <span className=\"level-name\">Difficulty {difficulty}</span>\r\n          <span className=\"level-count\">{count}</span>\r\n        </div>\r\n        <div className=\"distribution-bar\">\r\n          <div \r\n            className=\"distribution-fill\"\r\n            style={{ \r\n              width: `${stats.totalWords === 0 ? 0 : (count / stats.totalWords) * 100}%`,\r\n              backgroundColor: getDifficultyColor(parseInt(difficulty))\r\n            }}\r\n          ></div>\r\n        </div>\r\n        <span className=\"level-description\">{getDifficultyDescription(parseInt(difficulty))}</span>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const getLevelColor = (level) => {\r\n    const colors = ['#dc3545', '#fd7e14', '#ffc107', '#20c997', '#198754', '#0d6efd'];\r\n    return colors[Math.min(level, 5)];\r\n  };\r\n\r\n  const getDifficultyColor = (difficulty) => {\r\n    const colors = ['', '#28a745', '#ffc107', '#fd7e14', '#dc3545', '#6f42c1'];\r\n    return colors[difficulty];\r\n  };\r\n\r\n  const getRecentWords = () => {\r\n    if (!words || words.length === 0) return [];\r\n    return words\r\n      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n      .slice(0, 5);\r\n  };\r\n\r\n  const getTopWords = () => {\r\n    if (!words || words.length === 0) return [];\r\n    return words\r\n      .filter(word => (word.userLevel || 0) > 0)\r\n      .sort((a, b) => (b.userLevel || 0) - (a.userLevel || 0))\r\n      .slice(0, 5);\r\n  };\r\n\r\n  return (\r\n    <div className=\"statistics\">\r\n      <div className=\"statistics-header\">\r\n        <h2>Learning Statistics</h2>\r\n        <p>Track your progress and see your learning patterns</p>\r\n      </div>\r\n\r\n      {languagePair && (\r\n        <div className=\"language-pair-info\">\r\n          <h3>Current Language Pair</h3>\r\n          <div className=\"pair-display\">\r\n            <span className=\"source-language\">{languagePair.sourceLanguage}</span>\r\n            <span className=\"arrow\">→</span>\r\n            <span className=\"target-language\">{languagePair.targetLanguage}</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"stats-overview\">\r\n        <div className=\"overview-card\">\r\n          <h3>Total Words</h3>\r\n          <div className=\"overview-number\">{stats.totalWords || 0}</div>\r\n        </div>\r\n        <div className=\"overview-card\">\r\n          <h3>Mastered</h3>\r\n          <div className=\"overview-number\">{stats.masteredWords || stats.byUserLevel?.[5] || 0}</div>\r\n        </div>\r\n        <div className=\"overview-card\">\r\n          <h3>Learning</h3>\r\n          <div className=\"overview-number\">\r\n            {stats.learningWords || \r\n             (stats.byUserLevel ? \r\n               Object.entries(stats.byUserLevel)\r\n                 .filter(([level]) => level > 0 && level < 5)\r\n                 .reduce((sum, [, count]) => sum + count, 0) \r\n               : 0)}\r\n          </div>\r\n        </div>\r\n        <div className=\"overview-card\">\r\n          <h3>Progress</h3>\r\n          <div className=\"overview-number\">{calculateProgress()}%</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"stats-sections\">\r\n        <div className=\"stats-section\">\r\n          <h3>Learning Progress</h3>\r\n          <div className=\"progress-container\">\r\n            {renderProgressBar(\r\n              stats.masteredWords || stats.byUserLevel?.[5] || 0, \r\n              stats.totalWords, \r\n              'Mastered (Level 5)'\r\n            )}\r\n            {renderProgressBar(\r\n              stats.learningWords || \r\n              (stats.byUserLevel ? \r\n                Object.entries(stats.byUserLevel)\r\n                  .filter(([level]) => level > 0 && level < 5)\r\n                  .reduce((sum, [, count]) => sum + count, 0) \r\n                : 0),\r\n              stats.totalWords,\r\n              'Learning (Level 1-4)'\r\n            )}\r\n            {renderProgressBar(\r\n              stats.newWords || stats.byUserLevel?.[0] || 0, \r\n              stats.totalWords, \r\n              'Not Started (Level 0)'\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats-section\">\r\n          <h3>Level Distribution</h3>\r\n          <div className=\"distribution-container\">\r\n            {renderLevelDistribution()}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats-section\">\r\n          <h3>Difficulty Distribution</h3>\r\n          <div className=\"distribution-container\">\r\n            {renderDifficultyDistribution()}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats-section\">\r\n          <h3>Recent Words Added</h3>\r\n          <div className=\"words-list\">\r\n            {getRecentWords().length > 0 ? (\r\n              getRecentWords().map(word => (\r\n                <div key={word.id} className=\"word-item\">\r\n                  <div className=\"word-text\">\r\n                    <span className=\"source\">{word.sourceWord || word.english}</span>\r\n                    <span className=\"target\">{word.targetWord || word.hebrew}</span>\r\n                  </div>\r\n                  <div className=\"word-meta\">\r\n                    <span className=\"level\">Level {word.userLevel || 0}</span>\r\n                    <span className=\"difficulty\">Diff {word.difficulty || 1}</span>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-data\">\r\n                <p>No words added yet</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"stats-section\">\r\n          <h3>Top Performing Words</h3>\r\n          <div className=\"words-list\">\r\n            {getTopWords().length > 0 ? (\r\n              getTopWords().map(word => (\r\n                <div key={word.id} className=\"word-item\">\r\n                  <div className=\"word-text\">\r\n                    <span className=\"source\">{word.sourceWord || word.english}</span>\r\n                    <span className=\"target\">{word.targetWord || word.hebrew}</span>\r\n                  </div>\r\n                  <div className=\"word-meta\">\r\n                    <span className=\"level\">Level {word.userLevel || 0}</span>\r\n                    <span className=\"difficulty\">Diff {word.difficulty || 1}</span>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-data\">\r\n                <p>No words learned yet</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}