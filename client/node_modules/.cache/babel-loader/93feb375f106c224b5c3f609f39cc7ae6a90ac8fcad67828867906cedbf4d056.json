{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Magshimim\\\\Documents\\\\wordGame\\\\client\\\\src\\\\components\\\\AdminImport.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminImport = () => {\n  _s();\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [words, setWords] = useState([]);\n  const [activeTab, setActiveTab] = useState('import');\n  const [searchTerm, setSearchTerm] = useState('');\n  const fileInputRef = useRef(null);\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleTextChange = e => {\n    setTextContent(e.target.value);\n  };\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n  const parseWords = text => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Try different parsing strategies\n      let english, hebrew;\n\n      // Strategy 1: Look for tab separator\n      if (trimmedLine.includes('\\t')) {\n        const parts = trimmedLine.split('\\t');\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join('\\t').trim();\n        }\n      }\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\n      else if (trimmedLine.includes('  ')) {\n        const parts = trimmedLine.split(/\\s{2,}/);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(' ').trim();\n        }\n      }\n      // Strategy 3: Look for common separators like |, -, or :\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\n        const separator = trimmedLine.includes('|') ? '|' : trimmedLine.includes('-') ? '-' : ':';\n        const parts = trimmedLine.split(separator);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(separator).trim();\n        }\n      }\n      // Strategy 4: Fallback to original logic but with better hebrew detection\n      else {\n        const parts = trimmedLine.split(/\\s+/);\n        if (parts.length >= 2) {\n          // Try to find where English ends and Hebrew begins\n          // Hebrew text typically contains Hebrew characters\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n          let englishEndIndex = 0;\n          for (let i = 0; i < parts.length; i++) {\n            if (hebrewCharRegex.test(parts[i])) {\n              englishEndIndex = i;\n              break;\n            }\n          }\n\n          // If no Hebrew characters found, assume last word is Hebrew\n          if (englishEndIndex === 0) {\n            englishEndIndex = parts.length - 1;\n          }\n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\n        }\n      }\n      if (english && hebrew) {\n        words.push({\n          english,\n          hebrew,\n          lineNumber: index + 1\n        });\n      }\n    });\n    return words;\n  };\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8),\n          // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2),\n          // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round(processed / totalWords * 100)\n        });\n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', {\n        textContent\n      });\n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error importing words:', error);\n      setImportResult({\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to import words'\n      });\n      setIsImporting(false);\n    }\n  };\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleDeleteAll = async () => {\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\n      if (finalConfirm) {\n        try {\n          const response = await axios.post('/api/words/clear-all', {\n            confirm: true\n          });\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\n          // Refresh the page\n          window.location.reload();\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          console.error('Error deleting all words:', error);\n          alert('Failed to delete all words: ' + (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message));\n        }\n      }\n    }\n  };\n  const handleGenerateSentences = async () => {\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\n    const userConfirmed = window.confirm(confirmMessage);\n    if (userConfirmed) {\n      setIsGenerating(true);\n      try {\n        const response = await axios.post('/api/words/generate-sentences');\n        const details = response.data.details;\n        alert(`‚úÖ Successfully generated sentences!\\n\\nüìä Results:\\n‚Ä¢ Processed: ${details.processed} words\\n‚Ä¢ Updated: ${details.updated} words\\n‚Ä¢ Errors: ${details.errors} words\\n\\nüìù All sentences were generated using high-quality educational templates matched to difficulty levels.`);\n        // Refresh the page to show new sentences\n        window.location.reload();\n      } catch (error) {\n        var _error$response3, _error$response3$data;\n        console.error('Error generating sentences:', error);\n        alert('‚ùå Failed to generate sentences: ' + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message));\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n  };\n  const parsedWords = parseWords(textContent);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-import\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin-import-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Bulk Import Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Import multiple words from a text file or paste text directly. Supports multiple formats:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"format-help\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tab-separated:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), \" \\\"english\\\\t\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Double space:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), \" \\\"english  \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Separators:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), \" \\\"english|\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english-\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\", \\\"english:\\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Auto-detect:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), \" \\\"english phrase \\u05E2\\u05D1\\u05E8\\u05D9\\u05EA\\\" (automatically detects Hebrew characters)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Auto-difficulty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), \" Difficulty levels are automatically assessed based on word complexity\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Example sentences:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), \" Educational sentences are generated based on difficulty level\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Upload Text File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".txt,.csv\",\n          onChange: handleFileUpload,\n          ref: fileInputRef,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-help\",\n          children: \"Supported formats: .txt, .csv (UTF-8 encoding)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Or Paste Text Directly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: textContent,\n          onChange: handleTextChange,\n          placeholder: \"Enter words in any format:\\nhello \\u05E9\\u05DC\\u05D5\\u05DD\\naccording to  \\u05E2\\u05DC \\u05E4\\u05D9\\ngood morning|\\u05D1\\u05D5\\u05E7\\u05E8 \\u05D8\\u05D5\\u05D1\\nthank you-\\u05EA\\u05D5\\u05D3\\u05D4\\nhow are you:\\u05D0\\u05D9\\u05DA \\u05D0\\u05EA\\u05D4\",\n          rows: 10,\n          className: \"text-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preview-section\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: previewWords,\n          disabled: !textContent.trim(),\n          children: [\"Preview Words (\", parsedWords.length, \" found)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), showPreview && parsedWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"words-preview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Preview (\", parsedWords.length, \" words)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"English\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Hebrew\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: parsedWords.slice(0, 20).map((word, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.lineNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.english\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  dir: \"rtl\",\n                  children: word.hebrew\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), parsedWords.length > 20 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"preview-note\",\n            children: [\"Showing first 20 words. Total: \", parsedWords.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"import-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: startImport,\n          disabled: isImporting || !textContent.trim(),\n          children: isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: resetForm,\n          disabled: isImporting,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          onClick: handleDeleteAll,\n          disabled: isImporting,\n          title: \"Delete all words from database (Admin only)\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Delete All Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-success\",\n          onClick: handleGenerateSentences,\n          disabled: isGenerating || isImporting,\n          title: \"Generate example sentences for existing words\",\n          children: isGenerating ? 'Generating...' : 'üìù Generate Sentences'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), isImporting && progress && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress.percentage}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Processed: \", progress.processed, \" / \", progress.total, \" (\", progress.percentage, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Added: \", progress.added, \" | Skipped: \", progress.skipped, \" | Errors: \", progress.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Estimated time remaining: \", Math.ceil((progress.total - progress.processed) / 10), \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this), importResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `import-result ${importResult.error ? 'error' : 'success'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), importResult.error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: importResult.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Total processed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 18\n          }, this), \" \", importResult.total]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Successfully added:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 18\n          }, this), \" \", importResult.added]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Skipped (already exist):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 18\n          }, this), \" \", importResult.skipped]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Errors:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 18\n          }, this), \" \", importResult.errors]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Import Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Format: \\\"english hebrew\\\" (one word per line)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"English words will be converted to lowercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Duplicate words will be skipped automatically\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"All imported words start at difficulty level 1 and user level 0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Maximum file size: 10MB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminImport, \"yRhnOAQUFixIwWtyXAAfjEFAjVI=\");\n_c = AdminImport;\nexport default AdminImport;\nvar _c;\n$RefreshReg$(_c, \"AdminImport\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","AdminImport","_s","textContent","setTextContent","isImporting","setIsImporting","isGenerating","setIsGenerating","progress","setProgress","importResult","setImportResult","showPreview","setShowPreview","words","setWords","activeTab","setActiveTab","searchTerm","setSearchTerm","fileInputRef","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","result","readAsText","handleTextChange","value","previewWords","trim","alert","parseWords","text","lines","split","filter","line","forEach","index","trimmedLine","english","hebrew","includes","parts","length","toLowerCase","slice","join","separator","hebrewCharRegex","englishEndIndex","i","test","push","lineNumber","startImport","totalWords","parsedWords","processed","progressInterval","setInterval","Math","ceil","total","added","floor","skipped","errors","percentage","round","clearInterval","response","post","data","error","_error$response","_error$response$data","console","resetForm","current","handleDeleteAll","confirmMessage","userConfirmed","window","confirm","finalConfirm","deletedCount","location","reload","_error$response2","_error$response2$data","message","handleGenerateSentences","details","updated","_error$response3","_error$response3$data","className","children","fileName","_jsxFileName","columnNumber","type","accept","onChange","ref","placeholder","rows","onClick","disabled","map","word","dir","title","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Magshimim/Documents/wordGame/client/src/components/AdminImport.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminImport.css';\n\nconst AdminImport = () => {\n  const [textContent, setTextContent] = useState('');\n  const [isImporting, setIsImporting] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const [importResult, setImportResult] = useState(null);\n  const [showPreview, setShowPreview] = useState(false);\n  const [words, setWords] = useState([]);\n  const [activeTab, setActiveTab] = useState('import');\n  const [searchTerm, setSearchTerm] = useState('');\n  const fileInputRef = useRef(null);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setTextContent(e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleTextChange = (e) => {\n    setTextContent(e.target.value);\n  };\n\n  const previewWords = () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n    setShowPreview(true);\n  };\n\n  const parseWords = (text) => {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const words = [];\n    \n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Try different parsing strategies\n      let english, hebrew;\n      \n      // Strategy 1: Look for tab separator\n      if (trimmedLine.includes('\\t')) {\n        const parts = trimmedLine.split('\\t');\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join('\\t').trim();\n        }\n      }\n      // Strategy 2: Look for multiple consecutive spaces (likely separator)\n      else if (trimmedLine.includes('  ')) {\n        const parts = trimmedLine.split(/\\s{2,}/);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(' ').trim();\n        }\n      }\n      // Strategy 3: Look for common separators like |, -, or :\n      else if (trimmedLine.includes('|') || trimmedLine.includes('-') || trimmedLine.includes(':')) {\n        const separator = trimmedLine.includes('|') ? '|' : \n                        trimmedLine.includes('-') ? '-' : ':';\n        const parts = trimmedLine.split(separator);\n        if (parts.length >= 2) {\n          english = parts[0].toLowerCase().trim();\n          hebrew = parts.slice(1).join(separator).trim();\n        }\n      }\n      // Strategy 4: Fallback to original logic but with better hebrew detection\n      else {\n        const parts = trimmedLine.split(/\\s+/);\n        if (parts.length >= 2) {\n          // Try to find where English ends and Hebrew begins\n          // Hebrew text typically contains Hebrew characters\n          const hebrewCharRegex = /[\\u0590-\\u05FF\\uFB1D-\\uFB4F]/;\n          \n          let englishEndIndex = 0;\n          for (let i = 0; i < parts.length; i++) {\n            if (hebrewCharRegex.test(parts[i])) {\n              englishEndIndex = i;\n              break;\n            }\n          }\n          \n          // If no Hebrew characters found, assume last word is Hebrew\n          if (englishEndIndex === 0) {\n            englishEndIndex = parts.length - 1;\n          }\n          \n          english = parts.slice(0, englishEndIndex).join(' ').toLowerCase().trim();\n          hebrew = parts.slice(englishEndIndex).join(' ').trim();\n        }\n      }\n      \n      if (english && hebrew) {\n        words.push({\n          english,\n          hebrew,\n          lineNumber: index + 1\n        });\n      }\n    });\n    \n    return words;\n  };\n\n  const startImport = async () => {\n    if (!textContent.trim()) {\n      alert('Please enter or upload text content first');\n      return;\n    }\n\n    setIsImporting(true);\n    setProgress(null);\n    setImportResult(null);\n\n    try {\n      // Show progress simulation\n      const totalWords = parsedWords.length;\n      let processed = 0;\n      \n      const progressInterval = setInterval(() => {\n        processed += Math.ceil(totalWords / 20); // Update every 5%\n        if (processed >= totalWords) {\n          processed = totalWords;\n        }\n        \n        setProgress({\n          processed,\n          total: totalWords,\n          added: Math.floor(processed * 0.8), // Simulate 80% success rate\n          skipped: Math.floor(processed * 0.2), // Simulate 20% duplicates\n          errors: 0,\n          percentage: Math.round((processed / totalWords) * 100)\n        });\n        \n        if (processed >= totalWords) {\n          clearInterval(progressInterval);\n        }\n      }, 100);\n\n      // Send the import request\n      const response = await axios.post('/api/words/import', { textContent });\n      \n      clearInterval(progressInterval);\n      setImportResult(response.data);\n      setIsImporting(false);\n      \n    } catch (error) {\n      console.error('Error importing words:', error);\n      setImportResult({ error: error.response?.data?.error || 'Failed to import words' });\n      setIsImporting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setTextContent('');\n    setProgress(null);\n    setImportResult(null);\n    setShowPreview(false);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDeleteAll = async () => {\n    const confirmMessage = `Are you sure you want to delete ALL words from the database?\\n\\nThis action cannot be undone!`;\n    const userConfirmed = window.confirm(confirmMessage);\n    \n    if (userConfirmed) {\n      const finalConfirm = window.confirm('Final confirmation: This will permanently delete all words. Are you absolutely sure?');\n      if (finalConfirm) {\n        try {\n          const response = await axios.post('/api/words/clear-all', { confirm: true });\n          alert(`Successfully deleted ${response.data.deletedCount} words`);\n          // Refresh the page\n          window.location.reload();\n        } catch (error) {\n          console.error('Error deleting all words:', error);\n          alert('Failed to delete all words: ' + (error.response?.data?.error || error.message));\n        }\n      }\n    }\n  };\n\n  const handleGenerateSentences = async () => {\n    const confirmMessage = `This will generate example sentences for all words that don't have them.\\n\\nThis may take a few minutes. Continue?`;\n    const userConfirmed = window.confirm(confirmMessage);\n    \n    if (userConfirmed) {\n      setIsGenerating(true);\n      try {\n        const response = await axios.post('/api/words/generate-sentences');\n        const details = response.data.details;\n        alert(`‚úÖ Successfully generated sentences!\\n\\nüìä Results:\\n‚Ä¢ Processed: ${details.processed} words\\n‚Ä¢ Updated: ${details.updated} words\\n‚Ä¢ Errors: ${details.errors} words\\n\\nüìù All sentences were generated using high-quality educational templates matched to difficulty levels.`);\n        // Refresh the page to show new sentences\n        window.location.reload();\n      } catch (error) {\n        console.error('Error generating sentences:', error);\n        alert('‚ùå Failed to generate sentences: ' + (error.response?.data?.error || error.message));\n      } finally {\n        setIsGenerating(false);\n      }\n    }\n  };\n\n  const parsedWords = parseWords(textContent);\n\n  return (\n    <div className=\"admin-import\">\n      <div className=\"admin-import-header\">\n        <h2>Bulk Import Words</h2>\n        <p>Import multiple words from a text file or paste text directly. Supports multiple formats:</p>\n        <ul className=\"format-help\">\n          <li><strong>Tab-separated:</strong> \"english\\t◊¢◊ë◊®◊ô◊™\"</li>\n          <li><strong>Double space:</strong> \"english  ◊¢◊ë◊®◊ô◊™\"</li>\n          <li><strong>Separators:</strong> \"english|◊¢◊ë◊®◊ô◊™\", \"english-◊¢◊ë◊®◊ô◊™\", \"english:◊¢◊ë◊®◊ô◊™\"</li>\n          <li><strong>Auto-detect:</strong> \"english phrase ◊¢◊ë◊®◊ô◊™\" (automatically detects Hebrew characters)</li>\n          <li><strong>Auto-difficulty:</strong> Difficulty levels are automatically assessed based on word complexity</li>\n          <li><strong>Example sentences:</strong> Educational sentences are generated based on difficulty level</li>\n        </ul>\n      </div>\n\n      <div className=\"import-section\">\n        <div className=\"file-upload-section\">\n          <h3>Upload Text File</h3>\n          <input\n            type=\"file\"\n            accept=\".txt,.csv\"\n            onChange={handleFileUpload}\n            ref={fileInputRef}\n            className=\"file-input\"\n          />\n          <p className=\"file-help\">Supported formats: .txt, .csv (UTF-8 encoding)</p>\n        </div>\n\n        <div className=\"text-input-section\">\n          <h3>Or Paste Text Directly</h3>\n          <textarea\n            value={textContent}\n            onChange={handleTextChange}\n            placeholder=\"Enter words in any format:&#10;hello ◊©◊ú◊ï◊ù&#10;according to  ◊¢◊ú ◊§◊ô&#10;good morning|◊ë◊ï◊ß◊® ◊ò◊ï◊ë&#10;thank you-◊™◊ï◊ì◊î&#10;how are you:◊ê◊ô◊ö ◊ê◊™◊î\"\n            rows={10}\n            className=\"text-input\"\n          />\n        </div>\n\n        <div className=\"preview-section\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={previewWords}\n            disabled={!textContent.trim()}\n          >\n            Preview Words ({parsedWords.length} found)\n          </button>\n        </div>\n\n        {showPreview && parsedWords.length > 0 && (\n          <div className=\"words-preview\">\n            <h3>Preview ({parsedWords.length} words)</h3>\n            <div className=\"preview-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>English</th>\n                    <th>Hebrew</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {parsedWords.slice(0, 20).map((word, index) => (\n                    <tr key={index}>\n                      <td>{word.lineNumber}</td>\n                      <td>{word.english}</td>\n                      <td dir=\"rtl\">{word.hebrew}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              {parsedWords.length > 20 && (\n                <p className=\"preview-note\">Showing first 20 words. Total: {parsedWords.length}</p>\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"import-actions\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={startImport}\n            disabled={isImporting || !textContent.trim()}\n          >\n            {isImporting ? 'Importing...' : `Import ${parsedWords.length} Words`}\n          </button>\n          \n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={resetForm}\n            disabled={isImporting}\n          >\n            Reset\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={handleDeleteAll}\n            disabled={isImporting}\n            title=\"Delete all words from database (Admin only)\"\n          >\n            üóëÔ∏è Delete All Words\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={handleGenerateSentences}\n            disabled={isGenerating || isImporting}\n            title=\"Generate example sentences for existing words\"\n          >\n            {isGenerating ? 'Generating...' : 'üìù Generate Sentences'}\n          </button>\n        </div>\n      </div>\n\n      {isImporting && progress && (\n        <div className=\"import-progress\">\n          <h3>Import Progress</h3>\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\"\n              style={{ width: `${progress.percentage}%` }}\n            ></div>\n          </div>\n          <div className=\"progress-stats\">\n            <p>Processed: {progress.processed} / {progress.total} ({progress.percentage}%)</p>\n            <p>Added: {progress.added} | Skipped: {progress.skipped} | Errors: {progress.errors}</p>\n            <p>Estimated time remaining: {Math.ceil((progress.total - progress.processed) / 10)} seconds</p>\n          </div>\n        </div>\n      )}\n\n      {importResult && (\n        <div className={`import-result ${importResult.error ? 'error' : 'success'}`}>\n          <h3>Import Complete</h3>\n          {importResult.error ? (\n            <p className=\"error-message\">{importResult.error}</p>\n          ) : (\n            <div className=\"result-stats\">\n              <p><strong>Total processed:</strong> {importResult.total}</p>\n              <p><strong>Successfully added:</strong> {importResult.added}</p>\n              <p><strong>Skipped (already exist):</strong> {importResult.skipped}</p>\n              <p><strong>Errors:</strong> {importResult.errors}</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      <div className=\"import-info\">\n        <h3>Import Instructions:</h3>\n        <ul>\n          <li>Format: \"english hebrew\" (one word per line)</li>\n          <li>English words will be converted to lowercase</li>\n          <li>Duplicate words will be skipped automatically</li>\n          <li>All imported words start at difficulty level 1 and user level 0</li>\n          <li>Maximum file size: 10MB</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminImport; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}