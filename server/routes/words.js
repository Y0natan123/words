const express = require('express');
const router = express.Router();
const { v4: uuidv4 } = require('uuid');
const db = require('../database');

// Default settings for enhanced spaced repetition algorithm
const defaultSettings = {
  maxFocusWords: 5,
  focusPeriodDays: 5,
  reviewIntervalDays: 7,
  masteredReviewDays: 14,
  sessionSize: 15
};

// Sample words data structure
// {
//   id: "uuid",
//   english: "word",
//   hebrew: "מילה",
//   userLevel: 0, // 0-5 scale
//   difficulty: 1, // 1-5 scale
//   createdAt: "timestamp"
// }

// Get all words
router.get('/', async (req, res) => {
  try {
    const words = await db.getAllWords();
    res.json(words);
  } catch (error) {
    console.error('Error getting words:', error);
    res.status(500).json({ error: 'Failed to get words' });
  }
});

// Add new word
router.post('/', async (req, res) => {
  const { english, hebrew, difficulty = 1 } = req.body;
  
  if (!english || !hebrew) {
    return res.status(400).json({ error: 'English and Hebrew words are required' });
  }

  const newWord = {
    id: uuidv4(),
    english: english.toLowerCase().trim(),
    hebrew: hebrew.trim(),
    userLevel: 0,
    difficulty: Math.min(Math.max(difficulty, 1), 5),
    exampleSentence: null, // Will be generated by AI
    createdAt: new Date().toISOString()
  };

  try {
    const result = await db.addWord(newWord);
    if (result.success) {
      res.status(201).json(result.word);
    } else {
      res.status(409).json({ error: result.message });
    }
  } catch (error) {
    console.error('Error adding word:', error);
    res.status(500).json({ error: 'Failed to add word' });
  }
});

// Update word
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { english, hebrew, userLevel, difficulty } = req.body;

  const updates = {};
  if (english) updates.english = english.toLowerCase().trim();
  if (hebrew) updates.hebrew = hebrew.trim();
  if (userLevel !== undefined) updates.userLevel = Math.min(Math.max(userLevel, 0), 5);
  if (difficulty !== undefined) updates.difficulty = Math.min(Math.max(difficulty, 1), 5);

  try {
    const result = await db.updateWord(id, updates);
    if (result.success) {
      const updatedWord = await db.getWordById(id);
      res.json(updatedWord);
    } else {
      res.status(404).json({ error: result.message });
    }
  } catch (error) {
    console.error('Error updating word:', error);
    res.status(500).json({ error: 'Failed to update word' });
  }
});

// Delete word
router.delete('/:id', async (req, res) => {
  const { id } = req.params;
  
  try {
    const result = await db.deleteWord(id);
    if (result.success) {
      res.json({ message: result.message });
    } else {
      res.status(404).json({ error: result.message });
    }
  } catch (error) {
    console.error('Error deleting word:', error);
    res.status(500).json({ error: 'Failed to delete word' });
  }
});

// Get words by difficulty level
router.get('/difficulty/:level', async (req, res) => {
  const { level } = req.params;
  try {
    const words = await db.getAllWords();
    const filteredWords = words.filter(word => word.difficulty === parseInt(level));
    res.json(filteredWords);
  } catch (error) {
    console.error('Error getting words by difficulty:', error);
    res.status(500).json({ error: 'Failed to get words by difficulty' });
  }
});

// Get words by user level
router.get('/user-level/:level', async (req, res) => {
  const { level } = req.params;
  try {
    const words = await db.getAllWords();
    const filteredWords = words.filter(word => word.userLevel === parseInt(level));
    res.json(filteredWords);
  } catch (error) {
    console.error('Error getting words by user level:', error);
    res.status(500).json({ error: 'Failed to get words by user level' });
  }
});

// Update user progress for a word
router.post('/:id/progress', async (req, res) => {
  const { id } = req.params;
  const { userLevel } = req.body;

  try {
    const result = await db.updateWord(id, { userLevel: Math.min(Math.max(userLevel, 0), 5) });
    if (result.success) {
      const updatedWord = await db.getWordById(id);
      res.json(updatedWord);
    } else {
      res.status(404).json({ error: result.message });
    }
  } catch (error) {
    console.error('Error updating progress:', error);
    res.status(500).json({ error: 'Failed to update progress' });
  }
});

// Get user progress statistics
router.get('/progress/stats', async (req, res) => {
  try {
    const stats = await db.getStats();
    res.json(stats);
  } catch (error) {
    console.error('Error getting stats:', error);
    res.status(500).json({ error: 'Failed to get statistics' });
  }
});

// Import words from text file with progress
router.post('/import', async (req, res) => {
  const { textContent } = req.body;
  
  if (!textContent) {
    return res.status(400).json({ error: 'Text content is required' });
  }

  try {
    const result = await db.importWordsFromText(textContent);
    res.json(result);
  } catch (error) {
    console.error('Error importing words:', error);
    res.status(500).json({ error: 'Failed to import words' });
  }
});

// Delete all words (admin only)
router.post('/clear-all', async (req, res) => {
  const { confirm } = req.body;
  
  if (confirm !== true) {
    return res.status(400).json({ error: 'Confirmation required. Send confirm: true in request body.' });
  }
  
  try {
    const result = await db.deleteAllWords();
    res.json(result);
  } catch (error) {
    console.error('Error deleting all words:', error);
    res.status(500).json({ error: 'Failed to delete all words' });
  }
});

// Generate example sentences for existing words (admin only)
router.post('/generate-sentences', async (req, res) => {
  try {
    const result = await db.generateMissingSentences();
    res.json({
      message: `Generated sentences for ${result.updated} words`,
      details: result
    });
  } catch (error) {
    console.error('Error generating sentences:', error);
    res.status(500).json({ error: 'Failed to generate sentences' });
  }
});

// Get spaced repetition words for practice
router.get('/spaced-repetition', async (req, res) => {
  try {
    const settings = { ...defaultSettings, ...req.query };
    const result = await db.getSpacedRepetitionWords(settings);
    res.json(result);
  } catch (error) {
    console.error('Error getting spaced repetition words:', error);
    res.status(500).json({ error: 'Failed to get practice words' });
  }
});

// Update word progress with spaced repetition
router.post('/:id/spaced-progress', async (req, res) => {
  const { id } = req.params;
  const { userLevel } = req.body;
  
  if (userLevel < 0 || userLevel > 5) {
    return res.status(400).json({ error: 'User level must be between 0 and 5' });
  }
  
  try {
    const settings = { ...defaultSettings, ...req.body.settings };
    const updatedWord = await db.updateWordWithSpacedRepetition(id, userLevel, settings);
    res.json(updatedWord);
  } catch (error) {
    console.error('Error updating word progress:', error);
    res.status(500).json({ error: 'Failed to update word progress' });
  }
});

// Get algorithm statistics
router.get('/algorithm-stats', async (req, res) => {
  try {
    const stats = await db.getAlgorithmStats();
    res.json(stats);
  } catch (error) {
    console.error('Error getting algorithm stats:', error);
    res.status(500).json({ error: 'Failed to get algorithm stats' });
  }
});

module.exports = router; 